package Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.DynamicTest.dynamicTest;

import Common.StringCalculator;
import org.junit.jupiter.api.*;

import java.util.Arrays;
import java.util.stream.Stream;

/**
 * Unit tests for the string calculator class.
 */
public class StringCalculatorTests {
    /**
     * Execute only once, in the starting.
     */
    @BeforeAll
    public static void beforeAll() {

    }

    /**
     * Execute only once, in the end.
     */
    @AfterAll
    public static void afterAll() {

    }

    /**
     * Execute for each test, before executing test.
     */
    @BeforeEach
    public void beforeEach() {

    }

    /**
     * Execute for each test, after executing test.
     */
    @AfterEach
    public void afterEach() {

    }

    /**
     * The Add method should return 0 when called with null.
     */
    @Test
    public void test_Add_Should_ReturnZero_When_CalledWithNull() throws Exception {
        // Arrange.
        String input = null;
        int expectedResult = 0;

        // Act.
        int actualResult = this.act_Add(input);

        // Assert.
        assertEquals(expectedResult, actualResult);
    }

    /**
     * The Add method should return 0 when called with empty string.
     */
    @Test
    public void test_Add_Should_ReturnZero_When_CalledWithEmptyString() throws Exception {
        // Arrange.
        String input = "";
        int expectedResult = 0;

        // Act.
        int actualResult = this.act_Add(input);

        // Assert.
        assertEquals(expectedResult, actualResult);
    }

    /**
     * The Add method should return 0 when called with whitespace.
     */
    @Test
    public void test_Add_Should_ReturnZero_When_CalledWithWhitespace() throws Exception {
        // Arrange.
        String input = " ";
        int expectedResult = 0;

        // Act.
        int actualResult = this.act_Add(input);

        // Assert.
        assertEquals(expectedResult, actualResult);
    }

    /**
     * The Add method should return 0 when called with custom separator declaration.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ReturnZero_When_CalledWithNullOrEmptyStringOrWhitespaceOrSeparatorDeclaration() {
        // Arrange.
        String[] inputs = new String[] {
                "//$\n",
                "//$$\n",
                "//sep\n",
                "//\n\n",
                "//-\n",
                "//-1\n",
                "//[$]\n",
                "//[$$]\n",
                "//[sep]\n",
                "//[\n]\n",
                "//[-]\n",
                "//[-1]\n",
                "//[-1][-2]\n",
                "//[*][%]\n",
                "//[**][%%]\n",
                "//[sep1][sep2]\n",
                "//[[][]]\n",
                "//[+][!][#]\n",
                "//[++][!!][##]\n",
                "//[-1][-2][-3]\n",
                "//[sep1][sep2][sep3]\n",
                "//[?][??][???]\n"
        };
        int expectedResult = 0;

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input, () -> {
                assertEquals(expectedResult, this.act_Add(input));
            });
        });
    }

    /**
     * The Add method should return the input when called with a single integer number.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ReturnInput_When_CalledWithSingleInteger() {
        // Arrange.
        String[][] inputs = new String[][] {
                {"0", "0"},
                {"1", "1"},
                {"1000", "1000"},
                {"1001", "0"},
                {"//$\n0", "0"},
                {"//$\n1", "1"},
                {"//$\n1000", "1000"},
                {"//$\n1001", "0"},
                {"//$$\n0", "0"},
                {"//$$\n1", "1"},
                {"//$$\n1000", "1000"},
                {"//$$\n1001", "0"},
                {"//sep\n0", "0"},
                {"//sep\n1", "1"},
                {"//sep\n1000", "1000"},
                {"//sep\n1001", "0"},
                {"//\n\n0", "0"},
                {"//\n\n1", "1"},
                {"//\n\n1000", "1000"},
                {"//\n\n1001", "0"},
                {"//-\n0", "0"},
                {"//-\n1", "1"},
                {"//-\n1000", "1000"},
                {"//-\n1001", "0"},
                {"//-1\n0", "0"},
                {"//-1\n1", "1"},
                {"//-1\n1000", "1000"},
                {"//-1\n1001", "0"},
                {"//[$]\n0", "0"},
                {"//[$]\n1", "1"},
                {"//[$]\n1000", "1000"},
                {"//[$]\n1001", "0"},
                {"//[$$]\n0", "0"},
                {"//[$$]\n1", "1"},
                {"//[$$]\n1000", "1000"},
                {"//[$$]\n1001", "0"},
                {"//[sep]\n0", "0"},
                {"//[sep]\n1", "1"},
                {"//[sep]\n1000", "1000"},
                {"//[sep]\n1001", "0"},
                {"//[\n]\n0", "0"},
                {"//[\n]\n1", "1"},
                {"//[\n]\n1000", "1000"},
                {"//[\n]\n1001", "0"},
                {"//[-]\n0", "0"},
                {"//[-]\n1", "1"},
                {"//[-]\n1000", "1000"},
                {"//[-]\n1001", "0"},
                {"//[-1]\n0", "0"},
                {"//[-1]\n1", "1"},
                {"//[-1]\n1000", "1000"},
                {"//[-1]\n1001", "0"},
                {"//[-1][-2]\n0", "0"},
                {"//[-1][-2]\n1", "1"},
                {"//[-1][-2]\n1000", "1000"},
                {"//[-1][-2]\n1001", "0"},
                {"//[*][%]\n0", "0"},
                {"//[*][%]\n1", "1"},
                {"//[*][%]\n1000", "1000"},
                {"//[*][%]\n1001", "0"},
                {"//[**][%%]\n0", "0"},
                {"//[**][%%]\n1", "1"},
                {"//[**][%%]\n1000", "1000"},
                {"//[**][%%]\n1001", "0"},
                {"//[sep1][sep2]\n0", "0"},
                {"//[sep1][sep2]\n1", "1"},
                {"//[sep1][sep2]\n1000", "1000"},
                {"//[sep1][sep2]\n1001", "0"},
                {"//[[][]]\n0", "0"},
                {"//[[][]]\n1", "1"},
                {"//[[][]]\n1000", "1000"},
                {"//[[][]]\n1001", "0"},
                {"//[+][!][#]\n0", "0"},
                {"//[+][!][#]\n1", "1"},
                {"//[+][!][#]\n1000", "1000"},
                {"//[+][!][#]\n1001", "0"},
                {"//[++][!!][##]\n0", "0"},
                {"//[++][!!][##]\n1", "1"},
                {"//[++][!!][##]\n1000", "1000"},
                {"//[++][!!][##]\n1001", "0"},
                {"//[-1][-2][-3]\n0", "0"},
                {"//[-1][-2][-3]\n1", "1"},
                {"//[-1][-2][-3]\n1000", "1000"},
                {"//[-1][-2][-3]\n1001", "0"},
                {"//[sep1][sep2][sep3]\n0", "0"},
                {"//[sep1][sep2][sep3]\n1", "1"},
                {"//[sep1][sep2][sep3]\n1000", "1000"},
                {"//[sep1][sep2][sep3]\n1001", "0"},
                {"//[?][??][???]\n0", "0"},
                {"//[?][??][???]\n1", "1"},
                {"//[?][??][???]\n1000", "1000"},
                {"//[?][??][???]\n1001", "0"}
        };

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input[0], () -> {
                assertEquals(Integer.parseInt(input[1]), this.act_Add(input[0]));
            });
        });
    }

    /**
     * The Add method should return the sum of the input when called with a multiple positive integer numbers up to 1000.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ReturnSum_When_CalledWithTwoOrMoreIntegers() {
        // Arrange.
        String[][] inputs = new String[][] {
                {"0;0", "0"},
                {"1;0", "1"},
                {"0;1", "1"},
                {"0;1000", "1000"},
                {"1;1000", "1001"},
                {"1;1001", "1"},
                {"1001;1000", "1000"},
                {"1;2", "3"},
                {"0\n0", "0"},
                {"1\n0", "1"},
                {"0\n1", "1"},
                {"0\n1000", "1000"},
                {"1\n1000", "1001"},
                {"1\n1001", "1"},
                {"1001\n1000", "1000"},
                {"1\n2", "3"},
                {"0\n0;0", "0"},
                {"1\n0;0", "1"},
                {"0\n1;0", "1"},
                {"0\n0;1", "1"},
                {"0\n0;1000", "1000"},
                {"1\n0;1000", "1001"},
                {"0\n1;1001", "1"},
                {"1\n1001;1000", "1001"},
                {"1;2\n3", "6"},
                {"1;2\n3;4\n5;6\n7;8\n9;10", "55"},
                {"//$\n0$0", "0"},
                {"//$\n1$0", "1"},
                {"//$\n0$1", "1"},
                {"//$\n0$1000", "1000"},
                {"//$\n1$1000", "1001"},
                {"//$\n1$1001", "1"},
                {"//$\n1001$1000", "1000"},
                {"//$\n1$2", "3"},
                {"//$\n0$0$0", "0"},
                {"//$\n1$0$0", "1"},
                {"//$\n0$1$0", "1"},
                {"//$\n0$0$1", "1"},
                {"//$\n0$0$1000", "1000"},
                {"//$\n1$0$1000", "1001"},
                {"//$\n0$1$1001", "1"},
                {"//$\n1$1001$1000", "1001"},
                {"//$\n1$2$3", "6"},
                {"//$\n1$2$3$4$5$6$7$8$9$10", "55"},
                {"//$$\n0$$0", "0"},
                {"//$$\n1$$0", "1"},
                {"//$$\n0$$1", "1"},
                {"//$$\n0$$1000", "1000"},
                {"//$$\n1$$1000", "1001"},
                {"//$$\n1$$1001", "1"},
                {"//$$\n1001$$1000", "1000"},
                {"//$$\n1$$2", "3"},
                {"//$$\n0$$0$$0", "0"},
                {"//$$\n1$$0$$0", "1"},
                {"//$$\n0$$1$$0", "1"},
                {"//$$\n0$$0$$1", "1"},
                {"//$$\n0$$0$$1000", "1000"},
                {"//$$\n1$$0$$1000", "1001"},
                {"//$$\n0$$1$$1001", "1"},
                {"//$$\n1$$1001$$1000", "1001"},
                {"//$$\n1$$2$$3", "6"},
                {"//$$\n1$$2$$3$$4$$5$$6$$7$$8$$9$$10", "55"},
                {"//sep\n0sep0", "0"},
                {"//sep\n1sep0", "1"},
                {"//sep\n0sep1", "1"},
                {"//sep\n0sep1000", "1000"},
                {"//sep\n1sep1000", "1001"},
                {"//sep\n1sep1001", "1"},
                {"//sep\n1001sep1000", "1000"},
                {"//sep\n1sep2", "3"},
                {"//sep\n0sep0sep0", "0"},
                {"//sep\n1sep0sep0", "1"},
                {"//sep\n0sep1sep0", "1"},
                {"//sep\n0sep0sep1", "1"},
                {"//sep\n0sep0sep1000", "1000"},
                {"//sep\n1sep0sep1000", "1001"},
                {"//sep\n0sep1sep1001", "1"},
                {"//sep\n1sep1001sep1000", "1001"},
                {"//sep\n1sep2sep3", "6"},
                {"//sep\n1sep2sep3sep4sep5sep6sep7sep8sep9sep10", "55"},
                {"//\n\n0\n0", "0"},
                {"//\n\n1\n0", "1"},
                {"//\n\n0\n1", "1"},
                {"//\n\n0\n1000", "1000"},
                {"//\n\n1\n1000", "1001"},
                {"//\n\n1\n1001", "1"},
                {"//\n\n1001\n1000", "1000"},
                {"//\n\n1\n2", "3"},
                {"//\n\n0\n0\n0", "0"},
                {"//\n\n1\n0\n0", "1"},
                {"//\n\n0\n1\n0", "1"},
                {"//\n\n0\n0\n1", "1"},
                {"//\n\n0\n0\n1000", "1000"},
                {"//\n\n1\n0\n1000", "1001"},
                {"//\n\n0\n1\n1001", "1"},
                {"//\n\n1\n1001\n1000", "1001"},
                {"//\n\n1\n2\n3", "6"},
                {"//\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "55"},
                {"//-\n0-0", "0"},
                {"//-\n1-0", "1"},
                {"//-\n0-1", "1"},
                {"//-\n0-1000", "1000"},
                {"//-\n1-1000", "1001"},
                {"//-\n1-1001", "1"},
                {"//-\n1001-1000", "1000"},
                {"//-\n1-2", "3"},
                {"//-\n0-0-0", "0"},
                {"//-\n1-0-0", "1"},
                {"//-\n0-1-0", "1"},
                {"//-\n0-0-1", "1"},
                {"//-\n0-0-1000", "1000"},
                {"//-\n1-0-1000", "1001"},
                {"//-\n0-1-1001", "1"},
                {"//-\n1-1001-1000", "1001"},
                {"//-\n1-2-3", "6"},
                {"//-\n1-2-3-4-5-6-7-8-9-10", "55"},
                {"//-1\n0-10", "0"},
                {"//-1\n1-10", "1"},
                {"//-1\n0-11", "1"},
                {"//-1\n0-11000", "1000"},
                {"//-1\n1-11000", "1001"},
                {"//-1\n1-11001", "1"},
                {"//-1\n1001-11000", "1000"},
                {"//-1\n1-12", "3"},
                {"//-1\n0-10-10", "0"},
                {"//-1\n1-10-10", "1"},
                {"//-1\n0-11-10", "1"},
                {"//-1\n0-10-11", "1"},
                {"//-1\n0-10-11000", "1000"},
                {"//-1\n1-10-11000", "1001"},
                {"//-1\n0-11-11001", "1"},
                {"//-1\n1-11001-11000", "1001"},
                {"//-1\n1-12-13", "6"},
                {"//-1\n1-12-13-14-15-16-17-18-19-110", "55"},
                {"//[$]\n0$0", "0"},
                {"//[$]\n1$0", "1"},
                {"//[$]\n0$1", "1"},
                {"//[$]\n0$1000", "1000"},
                {"//[$]\n1$1000", "1001"},
                {"//[$]\n1$1001", "1"},
                {"//[$]\n1001$1000", "1000"},
                {"//[$]\n1$2", "3"},
                {"//[$]\n0$0$0", "0"},
                {"//[$]\n1$0$0", "1"},
                {"//[$]\n0$1$0", "1"},
                {"//[$]\n0$0$1", "1"},
                {"//[$]\n0$0$1000", "1000"},
                {"//[$]\n1$0$1000", "1001"},
                {"//[$]\n0$1$1001", "1"},
                {"//[$]\n1$1001$1000", "1001"},
                {"//[$]\n1$2$3", "6"},
                {"//[$]\n1$2$3$4$5$6$7$8$9$10", "55"},
                {"//[$$]\n0$$0", "0"},
                {"//[$$]\n1$$0", "1"},
                {"//[$$]\n0$$1", "1"},
                {"//[$$]\n0$$1000", "1000"},
                {"//[$$]\n1$$1000", "1001"},
                {"//[$$]\n1$$1001", "1"},
                {"//[$$]\n1001$$1000", "1000"},
                {"//[$$]\n1$$2", "3"},
                {"//[$$]\n0$$0$$0", "0"},
                {"//[$$]\n1$$0$$0", "1"},
                {"//[$$]\n0$$1$$0", "1"},
                {"//[$$]\n0$$0$$1", "1"},
                {"//[$$]\n0$$0$$1000", "1000"},
                {"//[$$]\n1$$0$$1000", "1001"},
                {"//[$$]\n0$$1$$1001", "1"},
                {"//[$$]\n1$$1001$$1000", "1001"},
                {"//[$$]\n1$$2$$3", "6"},
                {"//[$$]\n1$$2$$3$$4$$5$$6$$7$$8$$9$$10", "55"},
                {"//[sep]\n0sep0", "0"},
                {"//[sep]\n1sep0", "1"},
                {"//[sep]\n0sep1", "1"},
                {"//[sep]\n0sep1000", "1000"},
                {"//[sep]\n1sep1000", "1001"},
                {"//[sep]\n1sep1001", "1"},
                {"//[sep]\n1001sep1000", "1000"},
                {"//[sep]\n1sep2", "3"},
                {"//[sep]\n0sep0sep0", "0"},
                {"//[sep]\n1sep0sep0", "1"},
                {"//[sep]\n0sep1sep0", "1"},
                {"//[sep]\n0sep0sep1", "1"},
                {"//[sep]\n0sep0sep1000", "1000"},
                {"//[sep]\n1sep0sep1000", "1001"},
                {"//[sep]\n0sep1sep1001", "1"},
                {"//[sep]\n1sep1001sep1000", "1001"},
                {"//[sep]\n1sep2sep3", "6"},
                {"//[sep]\n1sep2sep3sep4sep5sep6sep7sep8sep9sep10", "55"},
                {"//[\n]\n0\n0", "0"},
                {"//[\n]\n1\n0", "1"},
                {"//[\n]\n0\n1", "1"},
                {"//[\n]\n0\n1000", "1000"},
                {"//[\n]\n1\n1000", "1001"},
                {"//[\n]\n1\n1001", "1"},
                {"//[\n]\n1001\n1000", "1000"},
                {"//[\n]\n1\n2", "3"},
                {"//[\n]\n0\n0\n0", "0"},
                {"//[\n]\n1\n0\n0", "1"},
                {"//[\n]\n0\n1\n0", "1"},
                {"//[\n]\n0\n0\n1", "1"},
                {"//[\n]\n0\n0\n1000", "1000"},
                {"//[\n]\n1\n0\n1000", "1001"},
                {"//[\n]\n0\n1\n1001", "1"},
                {"//[\n]\n1\n1001\n1000", "1001"},
                {"//[\n]\n1\n2\n3", "6"},
                {"//[\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "55"},
                {"//[-]\n0-0", "0"},
                {"//[-]\n1-0", "1"},
                {"//[-]\n0-1", "1"},
                {"//[-]\n0-1000", "1000"},
                {"//[-]\n1-1000", "1001"},
                {"//[-]\n1-1001", "1"},
                {"//[-]\n1001-1000", "1000"},
                {"//[-]\n1-2", "3"},
                {"//[-]\n0-0-0", "0"},
                {"//[-]\n1-0-0", "1"},
                {"//[-]\n0-1-0", "1"},
                {"//[-]\n0-0-1", "1"},
                {"//[-]\n0-0-1000", "1000"},
                {"//[-]\n1-0-1000", "1001"},
                {"//[-]\n0-1-1001", "1"},
                {"//[-]\n1-1001-1000", "1001"},
                {"//[-]\n1-2-3", "6"},
                {"//[-]\n1-2-3-4-5-6-7-8-9-10", "55"},
                {"//[-1]\n0-10", "0"},
                {"//[-1]\n1-10", "1"},
                {"//[-1]\n0-11", "1"},
                {"//[-1]\n0-11000", "1000"},
                {"//[-1]\n1-11000", "1001"},
                {"//[-1]\n1-11001", "1"},
                {"//[-1]\n1001-11000", "1000"},
                {"//[-1]\n1-12", "3"},
                {"//[-1]\n0-10-10", "0"},
                {"//[-1]\n1-10-10", "1"},
                {"//[-1]\n0-11-10", "1"},
                {"//[-1]\n0-10-11", "1"},
                {"//[-1]\n0-10-11000", "1000"},
                {"//[-1]\n1-10-11000", "1001"},
                {"//[-1]\n0-11-11001", "1"},
                {"//[-1]\n1-11001-11000", "1001"},
                {"//[-1]\n1-12-13", "6"},
                {"//[-1]\n1-12-13-14-15-16-17-18-19-110", "55"},
                {"//[-1][-2]\n0-10", "0"},
                {"//[-1][-2]\n1-10", "1"},
                {"//[-1][-2]\n0-11", "1"},
                {"//[-1][-2]\n0-11000", "1000"},
                {"//[-1][-2]\n1-11000", "1001"},
                {"//[-1][-2]\n1-11001", "1"},
                {"//[-1][-2]\n1001-11000", "1000"},
                {"//[-1][-2]\n1-12", "3"},
                {"//[-1][-2]\n0-20", "0"},
                {"//[-1][-2]\n1-20", "1"},
                {"//[-1][-2]\n0-21", "1"},
                {"//[-1][-2]\n0-21000", "1000"},
                {"//[-1][-2]\n1-21000", "1001"},
                {"//[-1][-2]\n1-21001", "1"},
                {"//[-1][-2]\n1001-21000", "1000"},
                {"//[-1][-2]\n1-22", "3"},
                {"//[-1][-2]\n0-10-20", "0"},
                {"//[-1][-2]\n1-10-20", "1"},
                {"//[-1][-2]\n0-11-20", "1"},
                {"//[-1][-2]\n0-10-21", "1"},
                {"//[-1][-2]\n0-10-21000", "1000"},
                {"//[-1][-2]\n1-10-21000", "1001"},
                {"//[-1][-2]\n0-11-21001", "1"},
                {"//[-1][-2]\n1-11001-21000", "1001"},
                {"//[-1][-2]\n1-12-23", "6"},
                {"//[-1][-2]\n1-12-23-14-25-16-27-18-29-110", "55"},
                {"//[*][%]\n0*0", "0"},
                {"//[*][%]\n1*0", "1"},
                {"//[*][%]\n0*1", "1"},
                {"//[*][%]\n0*1000", "1000"},
                {"//[*][%]\n1*1000", "1001"},
                {"//[*][%]\n1*1001", "1"},
                {"//[*][%]\n1001*1000", "1000"},
                {"//[*][%]\n1*2", "3"},
                {"//[*][%]\n0%0", "0"},
                {"//[*][%]\n1%0", "1"},
                {"//[*][%]\n0%1", "1"},
                {"//[*][%]\n0%1000", "1000"},
                {"//[*][%]\n1%1000", "1001"},
                {"//[*][%]\n1%1001", "1"},
                {"//[*][%]\n1001%1000", "1000"},
                {"//[*][%]\n1%2", "3"},
                {"//[*][%]\n0*0%0", "0"},
                {"//[*][%]\n1*0%0", "1"},
                {"//[*][%]\n0*1%0", "1"},
                {"//[*][%]\n0*0%1", "1"},
                {"//[*][%]\n0*0%1000", "1000"},
                {"//[*][%]\n1*0%1000", "1001"},
                {"//[*][%]\n0*1%1001", "1"},
                {"//[*][%]\n1*1001%1000", "1001"},
                {"//[*][%]\n1*2%3", "6"},
                {"//[*][%]\n1*2%3*4%5*6%7*8%9*10", "55"},
                {"//[**][%%]\n0**0", "0"},
                {"//[**][%%]\n1**0", "1"},
                {"//[**][%%]\n0**1", "1"},
                {"//[**][%%]\n0**1000", "1000"},
                {"//[**][%%]\n1**1000", "1001"},
                {"//[**][%%]\n1**1001", "1"},
                {"//[**][%%]\n1001**1000", "1000"},
                {"//[**][%%]\n1**2", "3"},
                {"//[**][%%]\n0%%0", "0"},
                {"//[**][%%]\n1%%0", "1"},
                {"//[**][%%]\n0%%1", "1"},
                {"//[**][%%]\n0%%1000", "1000"},
                {"//[**][%%]\n1%%1000", "1001"},
                {"//[**][%%]\n1%%1001", "1"},
                {"//[**][%%]\n1001%%1000", "1000"},
                {"//[**][%%]\n1%%2", "3"},
                {"//[**][%%]\n0**0%%0", "0"},
                {"//[**][%%]\n1**0%%0", "1"},
                {"//[**][%%]\n0**1%%0", "1"},
                {"//[**][%%]\n0**0%%1", "1"},
                {"//[**][%%]\n0**0%%1000", "1000"},
                {"//[**][%%]\n1**0%%1000", "1001"},
                {"//[**][%%]\n0**1%%1001", "1"},
                {"//[**][%%]\n1**1001%%1000", "1001"},
                {"//[**][%%]\n1**2%%3", "6"},
                {"//[**][%%]\n1**2%%3**4%%5**6%%7**8%%9**10", "55"},
                {"//[sep1][sep2]\n0sep10", "0"},
                {"//[sep1][sep2]\n1sep10", "1"},
                {"//[sep1][sep2]\n0sep11", "1"},
                {"//[sep1][sep2]\n0sep11000", "1000"},
                {"//[sep1][sep2]\n1sep11000", "1001"},
                {"//[sep1][sep2]\n1sep11001", "1"},
                {"//[sep1][sep2]\n1001sep11000", "1000"},
                {"//[sep1][sep2]\n1sep12", "3"},
                {"//[sep1][sep2]\n0sep20", "0"},
                {"//[sep1][sep2]\n1sep20", "1"},
                {"//[sep1][sep2]\n0sep21", "1"},
                {"//[sep1][sep2]\n0sep21000", "1000"},
                {"//[sep1][sep2]\n1sep21000", "1001"},
                {"//[sep1][sep2]\n1sep21001", "1"},
                {"//[sep1][sep2]\n1001sep21000", "1000"},
                {"//[sep1][sep2]\n1sep22", "3"},
                {"//[sep1][sep2]\n0sep10sep20", "0"},
                {"//[sep1][sep2]\n1sep10sep20", "1"},
                {"//[sep1][sep2]\n0sep11sep20", "1"},
                {"//[sep1][sep2]\n0sep10sep21", "1"},
                {"//[sep1][sep2]\n0sep10sep21000", "1000"},
                {"//[sep1][sep2]\n1sep10sep21000", "1001"},
                {"//[sep1][sep2]\n0sep11sep21001", "1"},
                {"//[sep1][sep2]\n1sep11001sep21000", "1001"},
                {"//[sep1][sep2]\n1sep12sep23", "6"},
                {"//[sep1][sep2]\n1sep12sep23sep14sep25sep16sep27sep18sep29sep110", "55"},
                {"//[[][]]\n0[0", "0"},
                {"//[[][]]\n1[0", "1"},
                {"//[[][]]\n0[1", "1"},
                {"//[[][]]\n0[1000", "1000"},
                {"//[[][]]\n1[1000", "1001"},
                {"//[[][]]\n1[1001", "1"},
                {"//[[][]]\n1001[1000", "1000"},
                {"//[[][]]\n1[2", "3"},
                {"//[[][]]\n0]0", "0"},
                {"//[[][]]\n1]0", "1"},
                {"//[[][]]\n0]1", "1"},
                {"//[[][]]\n0]1000", "1000"},
                {"//[[][]]\n1]1000", "1001"},
                {"//[[][]]\n1]1001", "1"},
                {"//[[][]]\n1001]1000", "1000"},
                {"//[[][]]\n1]2", "3"},
                {"//[[][]]\n0[0]0", "0"},
                {"//[[][]]\n1[0]0", "1"},
                {"//[[][]]\n0[1]0", "1"},
                {"//[[][]]\n0[0]1", "1"},
                {"//[[][]]\n0[0]1000", "1000"},
                {"//[[][]]\n1[0]1000", "1001"},
                {"//[[][]]\n0[1]1001", "1"},
                {"//[[][]]\n1[1001]1000", "1001"},
                {"//[[][]]\n1[2]3", "6"},
                {"//[[][]]\n1[2]3[4]5[6]7[8]9[10", "55"},
                {"//[+][!][#]\n0+0", "0"},
                {"//[+][!][#]\n1+0", "1"},
                {"//[+][!][#]\n0+1", "1"},
                {"//[+][!][#]\n0+1000", "1000"},
                {"//[+][!][#]\n1+1000", "1001"},
                {"//[+][!][#]\n1+1001", "1"},
                {"//[+][!][#]\n1001+1000", "1000"},
                {"//[+][!][#]\n1+2", "3"},
                {"//[+][!][#]\n0!0", "0"},
                {"//[+][!][#]\n1!0", "1"},
                {"//[+][!][#]\n0!1", "1"},
                {"//[+][!][#]\n0!1000", "1000"},
                {"//[+][!][#]\n1!1000", "1001"},
                {"//[+][!][#]\n1!1001", "1"},
                {"//[+][!][#]\n1001!1000", "1000"},
                {"//[+][!][#]\n1!2", "3"},
                {"//[+][!][#]\n0#0", "0"},
                {"//[+][!][#]\n1#0", "1"},
                {"//[+][!][#]\n0#1", "1"},
                {"//[+][!][#]\n0#1000", "1000"},
                {"//[+][!][#]\n1#1000", "1001"},
                {"//[+][!][#]\n1#1001", "1"},
                {"//[+][!][#]\n1001#1000", "1000"},
                {"//[+][!][#]\n1#2", "3"},
                {"//[+][!][#]\n0+0!0#0", "0"},
                {"//[+][!][#]\n1+0!0#0", "1"},
                {"//[+][!][#]\n0+1!0#0", "1"},
                {"//[+][!][#]\n0+0!1#0", "1"},
                {"//[+][!][#]\n0+0!0#1", "1"},
                {"//[+][!][#]\n0+0!1000#0", "1000"},
                {"//[+][!][#]\n1+0!1000#0", "1001"},
                {"//[+][!][#]\n0+1!1001#0", "1"},
                {"//[+][!][#]\n1+1001!1000#0", "1001"},
                {"//[+][!][#]\n1+2!3#4", "10"},
                {"//[+][!][#]\n1+2!3#4+5!6#7+8!9#10", "55"},
                {"//[++][!!][##]\n0++0", "0"},
                {"//[++][!!][##]\n1++0", "1"},
                {"//[++][!!][##]\n0++1", "1"},
                {"//[++][!!][##]\n0++1000", "1000"},
                {"//[++][!!][##]\n1++1000", "1001"},
                {"//[++][!!][##]\n1++1001", "1"},
                {"//[++][!!][##]\n1001++1000", "1000"},
                {"//[++][!!][##]\n1++2", "3"},
                {"//[++][!!][##]\n0!!0", "0"},
                {"//[++][!!][##]\n1!!0", "1"},
                {"//[++][!!][##]\n0!!1", "1"},
                {"//[++][!!][##]\n0!!1000", "1000"},
                {"//[++][!!][##]\n1!!1000", "1001"},
                {"//[++][!!][##]\n1!!1001", "1"},
                {"//[++][!!][##]\n1001!!1000", "1000"},
                {"//[++][!!][##]\n1!!2", "3"},
                {"//[++][!!][##]\n0##0", "0"},
                {"//[++][!!][##]\n1##0", "1"},
                {"//[++][!!][##]\n0##1", "1"},
                {"//[++][!!][##]\n0##1000", "1000"},
                {"//[++][!!][##]\n1##1000", "1001"},
                {"//[++][!!][##]\n1##1001", "1"},
                {"//[++][!!][##]\n1001##1000", "1000"},
                {"//[++][!!][##]\n1##2", "3"},
                {"//[++][!!][##]\n0++0!!0##0", "0"},
                {"//[++][!!][##]\n1++0!!0##0", "1"},
                {"//[++][!!][##]\n0++1!!0##0", "1"},
                {"//[++][!!][##]\n0++0!!1##0", "1"},
                {"//[++][!!][##]\n0++0!!0##1", "1"},
                {"//[++][!!][##]\n0++0!!1000##0", "1000"},
                {"//[++][!!][##]\n1++0!!1000##0", "1001"},
                {"//[++][!!][##]\n0++1!!1001##0", "1"},
                {"//[++][!!][##]\n1++1001!!1000##0", "1001"},
                {"//[++][!!][##]\n1++2!!3##4", "10"},
                {"//[++][!!][##]\n1++2!!3##4++5!!6##7++8!!9##10", "55"},
                {"//[-1][-2][-3]\n0-10", "0"},
                {"//[-1][-2][-3]\n1-10", "1"},
                {"//[-1][-2][-3]\n0-11", "1"},
                {"//[-1][-2][-3]\n0-11000", "1000"},
                {"//[-1][-2][-3]\n1-11000", "1001"},
                {"//[-1][-2][-3]\n1-11001", "1"},
                {"//[-1][-2][-3]\n1001-11000", "1000"},
                {"//[-1][-2][-3]\n1-12", "3"},
                {"//[-1][-2][-3]\n0-20", "0"},
                {"//[-1][-2][-3]\n1-20", "1"},
                {"//[-1][-2][-3]\n0-21", "1"},
                {"//[-1][-2][-3]\n0-21000", "1000"},
                {"//[-1][-2][-3]\n1-21000", "1001"},
                {"//[-1][-2][-3]\n1-21001", "1"},
                {"//[-1][-2][-3]\n1001-21000", "1000"},
                {"//[-1][-2][-3]\n1-22", "3"},
                {"//[-1][-2][-3]\n0-30", "0"},
                {"//[-1][-2][-3]\n1-30", "1"},
                {"//[-1][-2][-3]\n0-31", "1"},
                {"//[-1][-2][-3]\n0-31000", "1000"},
                {"//[-1][-2][-3]\n1-31000", "1001"},
                {"//[-1][-2][-3]\n1-31001", "1"},
                {"//[-1][-2][-3]\n1001-31000", "1000"},
                {"//[-1][-2][-3]\n1-32", "3"},
                {"//[-1][-2][-3]\n0-10-20-30", "0"},
                {"//[-1][-2][-3]\n1-10-20-30", "1"},
                {"//[-1][-2][-3]\n0-11-20-30", "1"},
                {"//[-1][-2][-3]\n0-10-21-30", "1"},
                {"//[-1][-2][-3]\n0-10-20-31", "1"},
                {"//[-1][-2][-3]\n0-10-21000-30", "1000"},
                {"//[-1][-2][-3]\n1-10-21000-30", "1001"},
                {"//[-1][-2][-3]\n0-11-21001-30", "1"},
                {"//[-1][-2][-3]\n1-11001-21000-30", "1001"},
                {"//[-1][-2][-3]\n1-12-23-34", "10"},
                {"//[-1][-2][-3]\n1-12-23-34-15-26-37-18-29-310", "55"},
                {"//[sep1][sep2][sep3]\n0sep10", "0"},
                {"//[sep1][sep2][sep3]\n1sep10", "1"},
                {"//[sep1][sep2][sep3]\n0sep11", "1"},
                {"//[sep1][sep2][sep3]\n0sep11000", "1000"},
                {"//[sep1][sep2][sep3]\n1sep11000", "1001"},
                {"//[sep1][sep2][sep3]\n1sep11001", "1"},
                {"//[sep1][sep2][sep3]\n1001sep11000", "1000"},
                {"//[sep1][sep2][sep3]\n1sep12", "3"},
                {"//[sep1][sep2][sep3]\n0sep20", "0"},
                {"//[sep1][sep2][sep3]\n1sep20", "1"},
                {"//[sep1][sep2][sep3]\n0sep21", "1"},
                {"//[sep1][sep2][sep3]\n0sep21000", "1000"},
                {"//[sep1][sep2][sep3]\n1sep21000", "1001"},
                {"//[sep1][sep2][sep3]\n1sep21001", "1"},
                {"//[sep1][sep2][sep3]\n1001sep21000", "1000"},
                {"//[sep1][sep2][sep3]\n1sep22", "3"},
                {"//[sep1][sep2][sep3]\n0sep30", "0"},
                {"//[sep1][sep2][sep3]\n1sep30", "1"},
                {"//[sep1][sep2][sep3]\n0sep31", "1"},
                {"//[sep1][sep2][sep3]\n0sep31000", "1000"},
                {"//[sep1][sep2][sep3]\n1sep31000", "1001"},
                {"//[sep1][sep2][sep3]\n1sep31001", "1"},
                {"//[sep1][sep2][sep3]\n1001sep31000", "1000"},
                {"//[sep1][sep2][sep3]\n1sep32", "3"},
                {"//[sep1][sep2][sep3]\n0sep10sep20sep30", "0"},
                {"//[sep1][sep2][sep3]\n1sep10sep20sep30", "1"},
                {"//[sep1][sep2][sep3]\n0sep11sep20sep30", "1"},
                {"//[sep1][sep2][sep3]\n0sep10sep21sep30", "1"},
                {"//[sep1][sep2][sep3]\n0sep10sep20sep31", "1"},
                {"//[sep1][sep2][sep3]\n0sep10sep21000sep30", "1000"},
                {"//[sep1][sep2][sep3]\n1sep10sep21000sep30", "1001"},
                {"//[sep1][sep2][sep3]\n0sep11sep21001sep30", "1"},
                {"//[sep1][sep2][sep3]\n1sep11001sep21000sep30", "1001"},
                {"//[sep1][sep2][sep3]\n1sep12sep23sep34", "10"},
                {"//[sep1][sep2][sep3]\n1sep12sep23sep34sep15sep26sep37sep18sep29sep310", "55"},
                {"//[?][??][???]\n0?0", "0"},
                {"//[?][??][???]\n1?0", "1"},
                {"//[?][??][???]\n0?1", "1"},
                {"//[?][??][???]\n0?1000", "1000"},
                {"//[?][??][???]\n1?1000", "1001"},
                {"//[?][??][???]\n1?1001", "1"},
                {"//[?][??][???]\n1001?1000", "1000"},
                {"//[?][??][???]\n1?2", "3"},
                {"//[?][??][???]\n0??0", "0"},
                {"//[?][??][???]\n1??0", "1"},
                {"//[?][??][???]\n0??1", "1"},
                {"//[?][??][???]\n0??1000", "1000"},
                {"//[?][??][???]\n1??1000", "1001"},
                {"//[?][??][???]\n1??1001", "1"},
                {"//[?][??][???]\n1001??1000", "1000"},
                {"//[?][??][???]\n1??2", "3"},
                {"//[?][??][???]\n0???0", "0"},
                {"//[?][??][???]\n1???0", "1"},
                {"//[?][??][???]\n0???1", "1"},
                {"//[?][??][???]\n0???1000", "1000"},
                {"//[?][??][???]\n1???1000", "1001"},
                {"//[?][??][???]\n1???1001", "1"},
                {"//[?][??][???]\n1001???1000", "1000"},
                {"//[?][??][???]\n1???2", "3"},
                {"//[?][??][???]\n0?0??0???0", "0"},
                {"//[?][??][???]\n1?0??0???0", "1"},
                {"//[?][??][???]\n0?1??0???0", "1"},
                {"//[?][??][???]\n0?0??1???0", "1"},
                {"//[?][??][???]\n0?0??0???1", "1"},
                {"//[?][??][???]\n0?0??1000???0", "1000"},
                {"//[?][??][???]\n1?0??1000???0", "1001"},
                {"//[?][??][???]\n0?1??1001???0", "1"},
                {"//[?][??][???]\n1?1001??1000???0", "1001"},
                {"//[?][??][???]\n1?2??3???4", "10"},
                {"//[?][??][???]\n1?2??3???4?5??6???7?8??9???10", "55"}
        };

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input[0], () -> {
                assertEquals(Integer.parseInt(input[1]), this.act_Add(input[0]));
            });
        });
    }

    /**
     * The Add method should throw an exception when called with an input ending with a separator.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ThrowException_When_CalledWithInputEndingWithSeparator() {
        // Arrange.
        String[] inputs = new String[] {
                "1;",
                "1;2;",
                "1\n",
                "1\n2\n",
                "1;2\n",
                "1\n2;",
                "//$\n1$",
                "//$\n1$2$",
                "//$$\n1$$",
                "//$$\n1$$2$$",
                "//sep\n1sep",
                "//sep\n1sep2sep",
                "//\n\n1\n",
                "//\n\n1\n2\n",
                "//-\n1-",
                "//-\n1-2-",
                "//-1\n1-1",
                "//-1\n1-12-1",
                "//[$]\n1$",
                "//[$]\n1$2$",
                "//[$$]\n1$$",
                "//[$$]\n1$$2$$",
                "//[sep]\n1sep",
                "//[sep]\n1sep2sep",
                "//[\n]\n1\n",
                "//[\n]\n1\n2\n",
                "//[-]\n1-",
                "//[-]\n1-2-",
                "//[-1]\n1-1",
                "//[-1]\n1-12-1",
                "//[-1][-2]\n1-1",
                "//[-1][-2]\n1-2",
                "//[-1][-2]\n1-12-2",
                "//[-1][-2]\n1-22-1",
                "//[*][%]\n1*",
                "//[*][%]\n1%",
                "//[*][%]\n1*2%",
                "//[*][%]\n1%2*",
                "//[**][%%]\n1**",
                "//[**][%%]\n1%%",
                "//[**][%%]\n1**2%%",
                "//[**][%%]\n1%%2**",
                "//[sep1][sep2]\n1sep1",
                "//[sep1][sep2]\n1sep2",
                "//[sep1][sep2]\n1sep12sep2",
                "//[sep1][sep2]\n1sep22sep1",
                "//[[][]]\n1[",
                "//[[][]]\n1]",
                "//[[][]]\n1[2]",
                "//[[][]]\n1]2[",
                "//[+][!][#]\n1+",
                "//[+][!][#]\n1!",
                "//[+][!][#]\n1#",
                "//[+][!][#]\n1+2!3#",
                "//[++][!!][##]\n1++",
                "//[++][!!][##]\n1!!",
                "//[++][!!][##]\n1##",
                "//[++][!!][##]\n1++2!!3##",
                "//[-1][-2][-3]\n1-1",
                "//[-1][-2][-3]\n1-2",
                "//[-1][-2][-3]\n1-3",
                "//[-1][-2][-3]\n1-12-23-3",
                "//[sep1][sep2][sep3]\n1sep1",
                "//[sep1][sep2][sep3]\n1sep2",
                "//[sep1][sep2][sep3]\n1sep3",
                "//[sep1][sep2][sep3]\n1sep12sep23sep3",
                "//[?][??][???]\n1?",
                "//[?][??][???]\n1??",
                "//[?][??][???]\n1???",
                "//[?][??][???]\n1?2??3???"
        };

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input, () -> {
                Exception error = assertThrows(Exception.class, () -> this.act_Add(input));
                assertEquals("Number expected but EOF found.", error.getMessage());
            });
        });
    }

    /**
     * The Add method should throw an exception when called with an input containing at least one negative number.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ThrowException_When_CalledWithInputContainingNegativeNumber() {
        // Arrange.
        String[][] inputs = new String[][] {
                {"-1", "-1"},
                {"-1;2", "-1"},
                {"1;-2", "-2"},
                {"-1;-1", "-1, -1"},
                {"-1\n2", "-1"},
                {"1\n-2", "-2"},
                {"-1\n-1", "-1, -1"},
                {"-1\n-2;-1", "-1, -2, -1"},
                {"//$\n-1", "-1"},
                {"//$\n-1$2", "-1"},
                {"//$\n1$-2", "-2"},
                {"//$\n-1$-1", "-1, -1"},
                {"//$$\n-1", "-1"},
                {"//$$\n-1$$2", "-1"},
                {"//$$\n1$$-2", "-2"},
                {"//$$\n-1$$-1", "-1, -1"},
                {"//sep\n-1", "-1"},
                {"//sep\n-1sep2", "-1"},
                {"//sep\n1sep-2", "-2"},
                {"//sep\n-1sep-1", "-1, -1"},
                {"//\n\n-1", "-1"},
                {"//\n\n-1\n2", "-1"},
                {"//\n\n1\n-2", "-2"},
                {"//\n\n-1\n-1", "-1, -1"},
                {"//-1\n-2", "-2"},
                {"//-1\n-2-13", "-2"},
                {"//-1\n2-1-3", "-3"},
                {"//-1\n-2-1-2", "-2, -2"},
                {"//[$]\n-1", "-1"},
                {"//[$]\n-1$2", "-1"},
                {"//[$]\n1$-2", "-2"},
                {"//[$]\n-1$-1", "-1, -1"},
                {"//[$$]\n-1", "-1"},
                {"//[$$]\n-1$$2", "-1"},
                {"//[$$]\n1$$-2", "-2"},
                {"//[$$]\n-1$$-1", "-1, -1"},
                {"//[sep]\n-1", "-1"},
                {"//[sep]\n-1sep2", "-1"},
                {"//[sep]\n1sep-2", "-2"},
                {"//[sep]\n-1sep-1", "-1, -1"},
                {"//[\n]\n-1", "-1"},
                {"//[\n]\n-1\n2", "-1"},
                {"//[\n]\n1\n-2", "-2"},
                {"//[\n]\n-1\n-1", "-1, -1"},
                {"//[-1]\n-2", "-2"},
                {"//[-1]\n-2-13", "-2"},
                {"//[-1]\n2-1-3", "-3"},
                {"//[-1]\n-2-1-3", "-2, -3"},
                {"//[-1][-2]\n-3", "-3"},
                {"//[-1][-2]\n-3-14", "-3"},
                {"//[-1][-2]\n-3-24", "-3"},
                {"//[-1][-2]\n3-1-4", "-4"},
                {"//[-1][-2]\n3-2-4", "-4"},
                {"//[-1][-2]\n-3-1-4", "-3, -4"},
                {"//[-1][-2]\n-3-2-4", "-3, -4"},
                {"//[-1][-2]\n-3-1-4-2-3", "-3, -4, -3"},
                {"//[*][%]\n-1", "-1"},
                {"//[*][%]\n-1*2", "-1"},
                {"//[*][%]\n-1%2", "-1"},
                {"//[*][%]\n1*-2", "-2"},
                {"//[*][%]\n1%-2", "-2"},
                {"//[*][%]\n-1*-2", "-1, -2"},
                {"//[*][%]\n-1%-2", "-1, -2"},
                {"//[*][%]\n-1*-2%-1", "-1, -2, -1"},
                {"//[**][%%]\n-1", "-1"},
                {"//[**][%%]\n-1**2", "-1"},
                {"//[**][%%]\n-1%%2", "-1"},
                {"//[**][%%]\n1**-2", "-2"},
                {"//[**][%%]\n1%%-2", "-2"},
                {"//[**][%%]\n-1**-2", "-1, -2"},
                {"//[**][%%]\n-1%%-2", "-1, -2"},
                {"//[**][%%]\n-1**-2%%-1", "-1, -2, -1"},
                {"//[sep1][sep2]\n-1", "-1"},
                {"//[sep1][sep2]\n-1sep12", "-1"},
                {"//[sep1][sep2]\n-1sep22", "-1"},
                {"//[sep1][sep2]\n1sep1-2", "-2"},
                {"//[sep1][sep2]\n1sep2-2", "-2"},
                {"//[sep1][sep2]\n-1sep1-2", "-1, -2"},
                {"//[sep1][sep2]\n-1sep2-2", "-1, -2"},
                {"//[sep1][sep2]\n-1sep1-2sep2-1", "-1, -2, -1"},
                {"//[[][]]]\n-1", "-1"},
                {"//[[][]]\n-1[2", "-1"},
                {"//[[][]]\n-1]2", "-1"},
                {"//[[][]]\n1[-2", "-2"},
                {"//[[][]]\n1]-2", "-2"},
                {"//[[][]]\n-1[-2", "-1, -2"},
                {"//[[][]]\n-1]-2", "-1, -2"},
                {"//[[][]]\n-1[-2]-1", "-1, -2, -1"},
                {"//[+][!][#]\n-1", "-1"},
                {"//[+][!][#]\n-1+2", "-1"},
                {"//[+][!][#]\n-1!2", "-1"},
                {"//[+][!][#]\n-1#2", "-1"},
                {"//[+][!][#]\n-1+-2!3", "-1, -2"},
                {"//[+][!][#]\n-1!-2#3", "-1, -2"},
                {"//[+][!][#]\n-1#-2+3", "-1, -2"},
                {"//[+][!][#]\n-1+-2!-3#-1", "-1, -2, -3, -1"},
                {"//[++][!!][##]\n-1", "-1"},
                {"//[++][!!][##]\n-1++2", "-1"},
                {"//[++][!!][##]\n-1!!2", "-1"},
                {"//[++][!!][##]\n-1##2", "-1"},
                {"//[++][!!][##]\n-1++-2!!3", "-1, -2"},
                {"//[++][!!][##]\n-1!!-2##3", "-1, -2"},
                {"//[++][!!][##]\n-1##-2++3", "-1, -2"},
                {"//[++][!!][##]\n-1++-2!!-3##-1", "-1, -2, -3, -1"},
                {"//[-1][-2][-3]\n-4", "-4"},
                {"//[-1][-2][-3]\n-4-15", "-4"},
                {"//[-1][-2][-3]\n-4-25", "-4"},
                {"//[-1][-2][-3]\n-4-35", "-4"},
                {"//[-1][-2][-3]\n-4-1-5-26", "-4, -5"},
                {"//[-1][-2][-3]\n-4-2-5-36", "-4, -5"},
                {"//[-1][-2][-3]\n-4-1-5-36", "-4, -5"},
                {"//[-1][-2][-3]\n-4-1-5-2-6-3-4", "-4, -5, -6, -4"},
                {"//[sep1][sep2][sep3]\n-1", "-1"},
                {"//[sep1][sep2][sep3]\n-1sep12", "-1"},
                {"//[sep1][sep2][sep3]\n-1sep22", "-1"},
                {"//[sep1][sep2][sep3]\n-1sep32", "-1"},
                {"//[sep1][sep2][sep3]\n-1sep1-2sep23", "-1, -2"},
                {"//[sep1][sep2][sep3]\n-1sep2-2sep33", "-1, -2"},
                {"//[sep1][sep2][sep3]\n-1sep1-2sep33", "-1, -2"},
                {"//[sep1][sep2][sep3]\n-1sep1-2sep2-3sep3-1", "-1, -2, -3, -1"},
                {"//[?][??][???]\n-1", "-1"},
                {"//[?][??][???]\n-1?2", "-1"},
                {"//[?][??][???]\n-1??2", "-1"},
                {"//[?][??][???]\n-1???2", "-1"},
                {"//[?][??][???]\n-1?-2??3", "-1, -2"},
                {"//[?][??][???]\n-1??-2???3", "-1, -2"},
                {"//[?][??][???]\n-1?-2???3", "-1, -2"},
                {"//[?][??][???]\n-1?-2??-3???-1", "-1, -2, -3, -1"}
        };

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input[0], () -> {
                Exception error = assertThrows(Exception.class, () -> this.act_Add(input[0]));
                assertEquals(String.format("Negatives not allowed : %s", input[1]), error.getMessage());
            });
        });
    }

    /**
     * The Add method should throw an exception when called with an input containing an unspecified separator.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ThrowException_When_CalledWithInputContainsUnsupportedSeparator() {
        // Arrange.
        String[][] inputs = new String[][] {
                {"1$2", ";' or '\n", "$", "1"},
                {"//$\n1;2", "$", ";", "1"},
                {"//$$\n1;2", "$$", ";", "1"},
                {"//sep\n1|2", "sep", "|", "1"},
                {"//\n\n1|2", "\n", "|", "1"},
                {"//-\n1|2", "-", "|", "1"},
                {"//-1\n1|2", "-1", "|", "1"},
                {"//[$]\n1;2", "$", ";", "1"},
                {"//[$$]\n1;2", "$$", ";", "1"},
                {"//[sep]\n1|2", "sep", "|", "1"},
                {"//[\n]\n1|2", "\n", "|", "1"},
                {"//[-]\n1|2", "-", "|", "1"},
                {"//[-1]\n1|2", "-1", "|", "1"},
                {"//[-1][-2]\n1|2", "-1' or '-2", "|", "1"},
                {"//[*][%]\n1=2", "*' or '%", "=", "1"},
                {"//[**][%%]\n1=2", "**' or '%%", "=", "1"},
                {"//[sep1][sep2]\n1del2", "sep1' or 'sep2", "del", "1"},
                {"//[[][]]\n1{2", "[' or ']", "{", "1"},
                {"//[+][!][#]\n1=2", "+' or '!' or '#", "=", "1"},
                {"//[++][!!][##]\n1=2", "++' or '!!' or '##", "=", "1"},
                {"//[-1][-2][-3]\n1=2", "-1' or '-2' or '-3", "=", "1"},
                {"//[sep1][sep2][sep3]\n1=2", "sep1' or 'sep2' or 'sep3", "=", "1"},
                {"//[?][??][???]\n1=2", "???' or '??' or '?", "=", "1"}
        };

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input[0], () -> {
                Exception error = assertThrows(Exception.class, () -> this.act_Add(input[0]));
                assertEquals(String.format("'%s' expected but '%s' found at position %s.", input[1], input[2], input[3]), error.getMessage());
            });
        });
    }

    /**
     * The Add method should throw an exception when called with an input starting with a separator or containing multiple separators following each other.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ThrowException_When_CalledWithInputContainsTwoOrMoreSeparatorsNext() {
        // Arrange.
        String[][] inputs = new String[][] {
                {";1;2", ";", "0"},
                {"1;;2", ";", "2"},
                {"\n1\n2", "\n", "0"},
                {"1\n\n2", "\n", "2"},
                {";1\n2", ";", "0"},
                {"\n1;2", "\n", "0"},
                {"1\n;2", ";", "2"},
                {"1;\n2", "\n", "2"},
                {"//$\n$1$2", "$", "0"},
                {"//$\n1$$2", "$", "2"},
                {"//$$\n$$1$$2", "$$", "0"},
                {"//$$\n1$$$$2", "$$", "3"},
                {"//sep\nsep1sep2", "sep", "0"},
                {"//sep\n1sepsep2", "sep", "4"},
                {"//\n\n\n1\n2", "\n", "0"},
                {"//\n\n1\n\n2", "\n", "2"},
                {"//-\n-1-2", "-", "0"},
                {"//-\n1--2", "-", "2"},
                {"//-1\n-11-12", "-1", "0"},
                {"//-1\n1-1-12", "-1", "3"},
                {"//[$]\n$1$2", "$", "0"},
                {"//[$]\n1$$2", "$", "2"},
                {"//[$$]\n$$1$$2", "$$", "0"},
                {"//[$$]\n1$$$$2", "$$", "3"},
                {"//[sep]\nsep1sep2", "sep", "0"},
                {"//[sep]\n1sepsep2", "sep", "4"},
                {"//[\n]\n\n1\n2", "\n", "0"},
                {"//[\n]\n1\n\n2", "\n", "2"},
                {"//[-]\n-1-2", "-", "0"},
                {"//[-]\n1--2", "-", "2"},
                {"//[-1]\n-11-12", "-1", "0"},
                {"//[-1]\n1-1-12", "-1", "3"},
                {"//[-1][-2]\n-11-12", "-1", "0"},
                {"//[-1][-2]\n1-1-12", "-1", "3"},
                {"//[-1][-2]\n-21-22", "-2", "0"},
                {"//[-1][-2]\n1-2-22", "-2", "3"},
                {"//[-1][-2]\n-11-22", "-1", "0"},
                {"//[-1][-2]\n-21-12", "-2", "0"},
                {"//[-1][-2]\n1-2-12", "-1", "3"},
                {"//[-1][-2]\n1-1-22", "-2", "3"},
                {"//[*][%]\n*1*2", "*", "0"},
                {"//[*][%]\n1**2", "*", "2"},
                {"//[*][%]\n%1%2", "%", "0"},
                {"//[*][%]\n1%%2", "%", "2"},
                {"//[*][%]\n*1%2", "*", "0"},
                {"//[*][%]\n%1*2", "%", "0"},
                {"//[*][%]\n1%*2", "*", "2"},
                {"//[*][%]\n1*%2", "%", "2"},
                {"//[**][%%]\n**1**2", "**", "0"},
                {"//[**][%%]\n1****2", "**", "3"},
                {"//[**][%%]\n%%1%%2", "%%", "0"},
                {"//[**][%%]\n1%%%%2", "%%", "3"},
                {"//[**][%%]\n**1%%2", "**", "0"},
                {"//[**][%%]\n%%1**2", "%%", "0"},
                {"//[**][%%]\n1%%**2", "**", "3"},
                {"//[**][%%]\n1**%%2", "%%", "3"},
                {"//[sep1][sep2]\nsep11sep12", "sep1", "0"},
                {"//[sep1][sep2]\n1sep1sep12", "sep1", "5"},
                {"//[sep1][sep2]\nsep21sep22", "sep2", "0"},
                {"//[sep1][sep2]\n1sep2sep22", "sep2", "5"},
                {"//[sep1][sep2]\nsep11sep22", "sep1", "0"},
                {"//[sep1][sep2]\nsep21sep12", "sep2", "0"},
                {"//[sep1][sep2]\n1sep2sep12", "sep1", "5"},
                {"//[sep1][sep2]\n1sep1sep22", "sep2", "5"},
                {"//[[][]]\n[1[2", "[", "0"},
                {"//[[][]]\n1[[2", "[", "2"},
                {"//[[][]]\n]1]2", "]", "0"},
                {"//[[][]]\n1]]2", "]", "2"},
                {"//[[][]]\n[1]2", "[", "0"},
                {"//[[][]]\n]1[2", "]", "0"},
                {"//[[][]]\n1][2", "[", "2"},
                {"//[[][]]\n1[]2", "]", "2"},
                {"//[+][!][#]\n+1+2", "+", "0"},
                {"//[+][!][#]\n1++2", "+", "2"},
                {"//[+][!][#]\n!1!2", "!", "0"},
                {"//[+][!][#]\n1!!2", "!", "2"},
                {"//[+][!][#]\n#1#2", "#", "0"},
                {"//[+][!][#]\n1##2", "#", "2"},
                {"//[+][!][#]\n+1!2", "+", "0"},
                {"//[+][!][#]\n!1#2", "!", "0"},
                {"//[+][!][#]\n#1+2", "#", "0"},
                {"//[+][!][#]\n1+!2", "!", "2"},
                {"//[+][!][#]\n1!#2", "#", "2"},
                {"//[+][!][#]\n1#+2", "+", "2"},
                {"//[++][!!][##]\n++1++2", "++", "0"},
                {"//[++][!!][##]\n1++++2", "++", "3"},
                {"//[++][!!][##]\n!!1!!2", "!!", "0"},
                {"//[++][!!][##]\n1!!!!2", "!!", "3"},
                {"//[++][!!][##]\n##1##2", "##", "0"},
                {"//[++][!!][##]\n1####2", "##", "3"},
                {"//[++][!!][##]\n++1!!2", "++", "0"},
                {"//[++][!!][##]\n!!1##2", "!!", "0"},
                {"//[++][!!][##]\n##1++2", "##", "0"},
                {"//[++][!!][##]\n1++!!2", "!!", "3"},
                {"//[++][!!][##]\n1!!##2", "##", "3"},
                {"//[++][!!][##]\n1##++2", "++", "3"},
                {"//[-1][-2][-3]\n-11-12", "-1", "0"},
                {"//[-1][-2][-3]\n1-1-12", "-1", "3"},
                {"//[-1][-2][-3]\n-21-22", "-2", "0"},
                {"//[-1][-2][-3]\n1-2-22", "-2", "3"},
                {"//[-1][-2][-3]\n-31-32", "-3", "0"},
                {"//[-1][-2][-3]\n1-3-32", "-3", "3"},
                {"//[-1][-2][-3]\n-11-22", "-1", "0"},
                {"//[-1][-2][-3]\n-21-32", "-2", "0"},
                {"//[-1][-2][-3]\n-31-12", "-3", "0"},
                {"//[-1][-2][-3]\n1-1-22", "-2", "3"},
                {"//[-1][-2][-3]\n1-2-32", "-3", "3"},
                {"//[-1][-2][-3]\n1-3-12", "-1", "3"},
                {"//[sep1][sep2][sep3]\nsep11sep12", "sep1", "0"},
                {"//[sep1][sep2][sep3]\n1sep1sep12", "sep1", "5"},
                {"//[sep1][sep2][sep3]\nsep21sep22", "sep2", "0"},
                {"//[sep1][sep2][sep3]\n1sep2sep22", "sep2", "5"},
                {"//[sep1][sep2][sep3]\nsep31sep32", "sep3", "0"},
                {"//[sep1][sep2][sep3]\n1sep3sep32", "sep3", "5"},
                {"//[sep1][sep2][sep3]\nsep11sep22", "sep1", "0"},
                {"//[sep1][sep2][sep3]\nsep21sep32", "sep2", "0"},
                {"//[sep1][sep2][sep3]\nsep31sep12", "sep3", "0"},
                {"//[sep1][sep2][sep3]\n1sep1sep22", "sep2", "5"},
                {"//[sep1][sep2][sep3]\n1sep2sep32", "sep3", "5"},
                {"//[sep1][sep2][sep3]\n1sep3sep12", "sep1", "5"},
                {"//[?][??][???]\n?1?2", "?", "0"},
                {"//[?][??][???]\n??1??2", "??", "0"},
                {"//[?][??][???]\n1????2", "?", "4"},
                {"//[?][??][???]\n???1???2", "???", "0"},
                {"//[?][??][???]\n1??????2", "???", "4"},
                {"//[?][??][???]\n?1??2", "?", "0"},
                {"//[?][??][???]\n??1???2", "??", "0"},
                {"//[?][??][???]\n???1?2", "???", "0"},
                {"//[?][??][???]\n1?????2", "??", "4"},
                {"//[?][??][???]\n1????2", "?", "4"}
        };

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input[0], () -> {
                Exception error = assertThrows(Exception.class, () -> this.act_Add(input[0]));
                assertEquals(String.format("Number expected but '%s' found at position %s.", input[1], input[2]), error.getMessage());
            });
        });
    }

    /**
     * The Add method should throw an exception when called with an input containing multiple errors.
     * @return A stream of dynamic tests.
     */
    @TestFactory
    public Stream<DynamicTest> test_Add_Should_ThrowException_When_CalledWithInputContainsMultipleErrors() {
        // Arrange.
        String[][] inputs = new String[][] {
                {"-1\n;|2;", "-1", ";' or '\n", "|", "4", ";", "3"},
                {"//$\n-1$$|2$", "-1", "$", "|", "4", "$", "3"},
                {"//$$\n-1$$$$|2$$", "-1", "$$", "|", "6", "$$", "4"},
                {"//sep\n-1sepsep|2sep", "-1", "sep", "|", "8", "sep", "5"},
                {"//\n\n-1\n\n|2\n", "-1", "\n", "|", "4", "\n", "3"},
                {"//-1\n-2-1-1|2-1", "-2", "-1", "|", "6", "-1", "4"},
                {"//[$]\n-1$$|2$", "-1", "$", "|", "4", "$", "3"},
                {"//[$$]\n-1$$$$|2$$", "-1", "$$", "|", "6", "$$", "4"},
                {"//[sep]\n-1sepsep|2sep", "-1", "sep", "|", "8", "sep", "5"},
                {"//[\n]\n-1\n\n|2\n", "-1", "\n", "|", "4", "\n", "3"},
                {"//[-1]\n-2-1-1|2-1", "-2", "-1", "|", "6", "-1", "4"},
                {"//[-1][-2]\n-3-2-1|2-2", "-3", "-1' or '-2", "|", "6", "-1", "4"},
                {"//[*][%]\n-1%*|2%", "-1", "*' or '%", "|", "4", "*", "3"},
                {"//[**][%%]\n-1%%**|2%%", "-1", "**' or '%%", "|", "6", "**", "4"},
                {"//[sep1][sep2]\n-1sep2sep1|2sep2", "-1", "sep1' or 'sep2", "|", "10", "sep1", "6"},
                {"//[[][]]\n-1][|2]", "-1", "[' or ']", "|", "4", "[", "3"},
                {"//[+][!][#]\n-1#!|2+", "-1", "+' or '!' or '#", "|", "4", "!", "3"},
                {"//[++][!!][##]\n-1##!!|2++", "-1", "++' or '!!' or '##", "|", "6", "!!", "4"},
                {"//[-1][-2][-3]\n-4-3-2|2-1", "-4", "-1' or '-2' or '-3", "|", "6", "-2", "4"},
                {"//[sep1][sep2][sep3]\n-1sep3sep2|2sep1", "-1", "sep1' or 'sep2' or 'sep3", "|", "10", "sep2", "6"},
                {"//[?][??][???]\n-1?????|2?", "-1", "???' or '??' or '?", "|", "7", "??", "5"}
        };

        // Assert.
        return Arrays.stream(inputs).map(input -> {
            return dynamicTest(input[0], () -> {
                Exception error = assertThrows(Exception.class, () -> this.act_Add(input[0]));
                assertEquals(String.format("Negatives not allowed : %s\n'%s' expected but '%s' found at position %s.\nNumber expected but '%s' found at position %s.\nNumber expected but EOF found.", input[1], input[2], input[3], input[4], input[5], input[6]), error.getMessage());
            });
        });
    }

    /**
     * Invokes the Add method with the provided test input.
     * @param input The test case input.
     * @return The result of the method.
     */
    protected int act_Add(String input) throws Exception {
        StringCalculator stringCalculator = new StringCalculator();

        return stringCalculator.add(input);
    }
}
