Imports Common
Imports NUnit.Framework

Namespace Test
    ''' <summary>
    ''' Unit tests for the string calculator class.
    ''' </summary>
    Public Class StringCalculatorTests
#Region "Methods"

#Region "Public Methods"

        ''' <summary>
        ''' Sets up test dependencies.
        ''' </summary>
        <SetUp>
        Public Sub Setup()
        End Sub

        ''' <summary>
        ''' The Add method should return 0 when called with null, empty string, whitespace or custom separator declaration.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <returns>The actual result of the test that is validated against the expected result.</returns>
        <Test,
        TestCase(Nothing, ExpectedResult:=0),
        TestCase("", ExpectedResult:=0),
        TestCase(" ", ExpectedResult:=0),
        TestCase("//$\n", ExpectedResult:=0),
        TestCase("//$$\n", ExpectedResult:=0),
        TestCase("//sep\n", ExpectedResult:=0),
        TestCase("//\n\n", ExpectedResult:=0),
        TestCase("//-\n", ExpectedResult:=0),
        TestCase("//-1\n", ExpectedResult:=0),
        TestCase("//[$]\n", ExpectedResult:=0),
        TestCase("//[$$]\n", ExpectedResult:=0),
        TestCase("//[sep]\n", ExpectedResult:=0),
        TestCase("//[\n]\n", ExpectedResult:=0),
        TestCase("//[-]\n", ExpectedResult:=0),
        TestCase("//[-1]\n", ExpectedResult:=0),
        TestCase("//[-1][-2]\n", ExpectedResult:=0),
        TestCase("//[*][%]\n", ExpectedResult:=0),
        TestCase("//[**][%%]\n", ExpectedResult:=0),
        TestCase("//[sep1][sep2]\n", ExpectedResult:=0),
        TestCase("//[[][]]\n", ExpectedResult:=0),
        TestCase("//[+][!][#]\n", ExpectedResult:=0),
        TestCase("//[++][!!][##]\n", ExpectedResult:=0),
        TestCase("//[-1][-2][-3]\n", ExpectedResult:=0),
        TestCase("//[sep1][sep2][sep3]\n", ExpectedResult:=0),
        TestCase("//[?][??][???]\n", ExpectedResult:=0)>
        Public Function Test_Add_Should_ReturnZero_When_CalledWithNullOrEmptyStringOrWhitespaceOrSeparatorDeclaration(input As String) As Integer
            ' Act.
            Dim actualResult = Me.Act_Add(input)

            ' Assert.
            Return actualResult
        End Function

        ''' <summary>
        ''' The Add method should return the input when called with a single integer number.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <returns>The actual result of the test that is validated against the expected result.</returns>
        <Test,
        TestCase("0", ExpectedResult:=0),
        TestCase("1", ExpectedResult:=1),
        TestCase("1000", ExpectedResult:=1000),
        TestCase("1001", ExpectedResult:=0),
        TestCase("//$\n0", ExpectedResult:=0),
        TestCase("//$\n1", ExpectedResult:=1),
        TestCase("//$\n1000", ExpectedResult:=1000),
        TestCase("//$\n1001", ExpectedResult:=0),
        TestCase("//$$\n0", ExpectedResult:=0),
        TestCase("//$$\n1", ExpectedResult:=1),
        TestCase("//$$\n1000", ExpectedResult:=1000),
        TestCase("//$$\n1001", ExpectedResult:=0),
        TestCase("//sep\n0", ExpectedResult:=0),
        TestCase("//sep\n1", ExpectedResult:=1),
        TestCase("//sep\n1000", ExpectedResult:=1000),
        TestCase("//sep\n1001", ExpectedResult:=0),
        TestCase("//\n\n0", ExpectedResult:=0),
        TestCase("//\n\n1", ExpectedResult:=1),
        TestCase("//\n\n1000", ExpectedResult:=1000),
        TestCase("//\n\n1001", ExpectedResult:=0),
        TestCase("//-\n0", ExpectedResult:=0),
        TestCase("//-\n1", ExpectedResult:=1),
        TestCase("//-\n1000", ExpectedResult:=1000),
        TestCase("//-\n1001", ExpectedResult:=0),
        TestCase("//-1\n0", ExpectedResult:=0),
        TestCase("//-1\n1", ExpectedResult:=1),
        TestCase("//-1\n1000", ExpectedResult:=1000),
        TestCase("//-1\n1001", ExpectedResult:=0),
        TestCase("//[$]\n0", ExpectedResult:=0),
        TestCase("//[$]\n1", ExpectedResult:=1),
        TestCase("//[$]\n1000", ExpectedResult:=1000),
        TestCase("//[$]\n1001", ExpectedResult:=0),
        TestCase("//[$$]\n0", ExpectedResult:=0),
        TestCase("//[$$]\n1", ExpectedResult:=1),
        TestCase("//[$$]\n1000", ExpectedResult:=1000),
        TestCase("//[$$]\n1001", ExpectedResult:=0),
        TestCase("//[sep]\n0", ExpectedResult:=0),
        TestCase("//[sep]\n1", ExpectedResult:=1),
        TestCase("//[sep]\n1000", ExpectedResult:=1000),
        TestCase("//[sep]\n1001", ExpectedResult:=0),
        TestCase("//[\n]\n0", ExpectedResult:=0),
        TestCase("//[\n]\n1", ExpectedResult:=1),
        TestCase("//[\n]\n1000", ExpectedResult:=1000),
        TestCase("//[\n]\n1001", ExpectedResult:=0),
        TestCase("//[-]\n0", ExpectedResult:=0),
        TestCase("//[-]\n1", ExpectedResult:=1),
        TestCase("//[-]\n1000", ExpectedResult:=1000),
        TestCase("//[-]\n1001", ExpectedResult:=0),
        TestCase("//[-1]\n0", ExpectedResult:=0),
        TestCase("//[-1]\n1", ExpectedResult:=1),
        TestCase("//[-1]\n1000", ExpectedResult:=1000),
        TestCase("//[-1]\n1001", ExpectedResult:=0),
        TestCase("//[-1][-2]\n0", ExpectedResult:=0),
        TestCase("//[-1][-2]\n1", ExpectedResult:=1),
        TestCase("//[-1][-2]\n1000", ExpectedResult:=1000),
        TestCase("//[-1][-2]\n1001", ExpectedResult:=0),
        TestCase("//[*][%]\n0", ExpectedResult:=0),
        TestCase("//[*][%]\n1", ExpectedResult:=1),
        TestCase("//[*][%]\n1000", ExpectedResult:=1000),
        TestCase("//[*][%]\n1001", ExpectedResult:=0),
        TestCase("//[**][%%]\n0", ExpectedResult:=0),
        TestCase("//[**][%%]\n1", ExpectedResult:=1),
        TestCase("//[**][%%]\n1000", ExpectedResult:=1000),
        TestCase("//[**][%%]\n1001", ExpectedResult:=0),
        TestCase("//[sep1][sep2]\n0", ExpectedResult:=0),
        TestCase("//[sep1][sep2]\n1", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n1000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2]\n1001", ExpectedResult:=0),
        TestCase("//[[][]]\n0", ExpectedResult:=0),
        TestCase("//[[][]]\n1", ExpectedResult:=1),
        TestCase("//[[][]]\n1000", ExpectedResult:=1000),
        TestCase("//[[][]]\n1001", ExpectedResult:=0),
        TestCase("//[+][!][#]\n0", ExpectedResult:=0),
        TestCase("//[+][!][#]\n1", ExpectedResult:=1),
        TestCase("//[+][!][#]\n1000", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1001", ExpectedResult:=0),
        TestCase("//[++][!!][##]\n0", ExpectedResult:=0),
        TestCase("//[++][!!][##]\n1", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n1000", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1001", ExpectedResult:=0),
        TestCase("//[-1][-2][-3]\n0", ExpectedResult:=0),
        TestCase("//[-1][-2][-3]\n1", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n1000", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1001", ExpectedResult:=0),
        TestCase("//[sep1][sep2][sep3]\n0", ExpectedResult:=0),
        TestCase("//[sep1][sep2][sep3]\n1", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n1000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1001", ExpectedResult:=0),
        TestCase("//[?][??][???]\n0", ExpectedResult:=0),
        TestCase("//[?][??][???]\n1", ExpectedResult:=1),
        TestCase("//[?][??][???]\n1000", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1001", ExpectedResult:=0)>
        Public Function Test_Add_Should_ReturnInput_When_CalledWithSingleInteger(input As String) As Integer
            ' Act.
            Dim actualResult = Me.Act_Add(input)

            ' Assert.
            Return actualResult
        End Function

        ''' <summary>
        ''' The Add method should return the sum of the input when called with a multiple positive integer numbers up to 1000.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <returns>The actual result of the test that is validated against the expected result.</returns>
        <Test,
        TestCase("0;0", ExpectedResult:=0),
        TestCase("1;0", ExpectedResult:=1),
        TestCase("0;1", ExpectedResult:=1),
        TestCase("0;1000", ExpectedResult:=1000),
        TestCase("1;1000", ExpectedResult:=1001),
        TestCase("1;1001", ExpectedResult:=1),
        TestCase("1001;1000", ExpectedResult:=1000),
        TestCase("1;2", ExpectedResult:=3),
        TestCase("0\n0", ExpectedResult:=0),
        TestCase("1\n0", ExpectedResult:=1),
        TestCase("0\n1", ExpectedResult:=1),
        TestCase("0\n1000", ExpectedResult:=1000),
        TestCase("1\n1000", ExpectedResult:=1001),
        TestCase("1\n1001", ExpectedResult:=1),
        TestCase("1001\n1000", ExpectedResult:=1000),
        TestCase("1\n2", ExpectedResult:=3),
        TestCase("0\n0;0", ExpectedResult:=0),
        TestCase("1\n0;0", ExpectedResult:=1),
        TestCase("0\n1;0", ExpectedResult:=1),
        TestCase("0\n0;1", ExpectedResult:=1),
        TestCase("0\n0;1000", ExpectedResult:=1000),
        TestCase("1\n0;1000", ExpectedResult:=1001),
        TestCase("0\n1;1001", ExpectedResult:=1),
        TestCase("1\n1001;1000", ExpectedResult:=1001),
        TestCase("1;2\n3", ExpectedResult:=6),
        TestCase("1;2\n3;4\n5;6\n7;8\n9;10", ExpectedResult:=55),
        TestCase("//$\n0$0", ExpectedResult:=0),
        TestCase("//$\n1$0", ExpectedResult:=1),
        TestCase("//$\n0$1", ExpectedResult:=1),
        TestCase("//$\n0$1000", ExpectedResult:=1000),
        TestCase("//$\n1$1000", ExpectedResult:=1001),
        TestCase("//$\n1$1001", ExpectedResult:=1),
        TestCase("//$\n1001$1000", ExpectedResult:=1000),
        TestCase("//$\n1$2", ExpectedResult:=3),
        TestCase("//$\n0$0$0", ExpectedResult:=0),
        TestCase("//$\n1$0$0", ExpectedResult:=1),
        TestCase("//$\n0$1$0", ExpectedResult:=1),
        TestCase("//$\n0$0$1", ExpectedResult:=1),
        TestCase("//$\n0$0$1000", ExpectedResult:=1000),
        TestCase("//$\n1$0$1000", ExpectedResult:=1001),
        TestCase("//$\n0$1$1001", ExpectedResult:=1),
        TestCase("//$\n1$1001$1000", ExpectedResult:=1001),
        TestCase("//$\n1$2$3", ExpectedResult:=6),
        TestCase("//$\n1$2$3$4$5$6$7$8$9$10", ExpectedResult:=55),
        TestCase("//$$\n0$$0", ExpectedResult:=0),
        TestCase("//$$\n1$$0", ExpectedResult:=1),
        TestCase("//$$\n0$$1", ExpectedResult:=1),
        TestCase("//$$\n0$$1000", ExpectedResult:=1000),
        TestCase("//$$\n1$$1000", ExpectedResult:=1001),
        TestCase("//$$\n1$$1001", ExpectedResult:=1),
        TestCase("//$$\n1001$$1000", ExpectedResult:=1000),
        TestCase("//$$\n1$$2", ExpectedResult:=3),
        TestCase("//$$\n0$$0$$0", ExpectedResult:=0),
        TestCase("//$$\n1$$0$$0", ExpectedResult:=1),
        TestCase("//$$\n0$$1$$0", ExpectedResult:=1),
        TestCase("//$$\n0$$0$$1", ExpectedResult:=1),
        TestCase("//$$\n0$$0$$1000", ExpectedResult:=1000),
        TestCase("//$$\n1$$0$$1000", ExpectedResult:=1001),
        TestCase("//$$\n0$$1$$1001", ExpectedResult:=1),
        TestCase("//$$\n1$$1001$$1000", ExpectedResult:=1001),
        TestCase("//$$\n1$$2$$3", ExpectedResult:=6),
        TestCase("//$$\n1$$2$$3$$4$$5$$6$$7$$8$$9$$10", ExpectedResult:=55),
        TestCase("//sep\n0sep0", ExpectedResult:=0),
        TestCase("//sep\n1sep0", ExpectedResult:=1),
        TestCase("//sep\n0sep1", ExpectedResult:=1),
        TestCase("//sep\n0sep1000", ExpectedResult:=1000),
        TestCase("//sep\n1sep1000", ExpectedResult:=1001),
        TestCase("//sep\n1sep1001", ExpectedResult:=1),
        TestCase("//sep\n1001sep1000", ExpectedResult:=1000),
        TestCase("//sep\n1sep2", ExpectedResult:=3),
        TestCase("//sep\n0sep0sep0", ExpectedResult:=0),
        TestCase("//sep\n1sep0sep0", ExpectedResult:=1),
        TestCase("//sep\n0sep1sep0", ExpectedResult:=1),
        TestCase("//sep\n0sep0sep1", ExpectedResult:=1),
        TestCase("//sep\n0sep0sep1000", ExpectedResult:=1000),
        TestCase("//sep\n1sep0sep1000", ExpectedResult:=1001),
        TestCase("//sep\n0sep1sep1001", ExpectedResult:=1),
        TestCase("//sep\n1sep1001sep1000", ExpectedResult:=1001),
        TestCase("//sep\n1sep2sep3", ExpectedResult:=6),
        TestCase("//sep\n1sep2sep3sep4sep5sep6sep7sep8sep9sep10", ExpectedResult:=55),
        TestCase("//\n\n0\n0", ExpectedResult:=0),
        TestCase("//\n\n1\n0", ExpectedResult:=1),
        TestCase("//\n\n0\n1", ExpectedResult:=1),
        TestCase("//\n\n0\n1000", ExpectedResult:=1000),
        TestCase("//\n\n1\n1000", ExpectedResult:=1001),
        TestCase("//\n\n1\n1001", ExpectedResult:=1),
        TestCase("//\n\n1001\n1000", ExpectedResult:=1000),
        TestCase("//\n\n1\n2", ExpectedResult:=3),
        TestCase("//\n\n0\n0\n0", ExpectedResult:=0),
        TestCase("//\n\n1\n0\n0", ExpectedResult:=1),
        TestCase("//\n\n0\n1\n0", ExpectedResult:=1),
        TestCase("//\n\n0\n0\n1", ExpectedResult:=1),
        TestCase("//\n\n0\n0\n1000", ExpectedResult:=1000),
        TestCase("//\n\n1\n0\n1000", ExpectedResult:=1001),
        TestCase("//\n\n0\n1\n1001", ExpectedResult:=1),
        TestCase("//\n\n1\n1001\n1000", ExpectedResult:=1001),
        TestCase("//\n\n1\n2\n3", ExpectedResult:=6),
        TestCase("//\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", ExpectedResult:=55),
        TestCase("//-\n0-0", ExpectedResult:=0),
        TestCase("//-\n1-0", ExpectedResult:=1),
        TestCase("//-\n0-1", ExpectedResult:=1),
        TestCase("//-\n0-1000", ExpectedResult:=1000),
        TestCase("//-\n1-1000", ExpectedResult:=1001),
        TestCase("//-\n1-1001", ExpectedResult:=1),
        TestCase("//-\n1001-1000", ExpectedResult:=1000),
        TestCase("//-\n1-2", ExpectedResult:=3),
        TestCase("//-\n0-0-0", ExpectedResult:=0),
        TestCase("//-\n1-0-0", ExpectedResult:=1),
        TestCase("//-\n0-1-0", ExpectedResult:=1),
        TestCase("//-\n0-0-1", ExpectedResult:=1),
        TestCase("//-\n0-0-1000", ExpectedResult:=1000),
        TestCase("//-\n1-0-1000", ExpectedResult:=1001),
        TestCase("//-\n0-1-1001", ExpectedResult:=1),
        TestCase("//-\n1-1001-1000", ExpectedResult:=1001),
        TestCase("//-\n1-2-3", ExpectedResult:=6),
        TestCase("//-\n1-2-3-4-5-6-7-8-9-10", ExpectedResult:=55),
        TestCase("//-1\n0-10", ExpectedResult:=0),
        TestCase("//-1\n1-10", ExpectedResult:=1),
        TestCase("//-1\n0-11", ExpectedResult:=1),
        TestCase("//-1\n0-11000", ExpectedResult:=1000),
        TestCase("//-1\n1-11000", ExpectedResult:=1001),
        TestCase("//-1\n1-11001", ExpectedResult:=1),
        TestCase("//-1\n1001-11000", ExpectedResult:=1000),
        TestCase("//-1\n1-12", ExpectedResult:=3),
        TestCase("//-1\n0-10-10", ExpectedResult:=0),
        TestCase("//-1\n1-10-10", ExpectedResult:=1),
        TestCase("//-1\n0-11-10", ExpectedResult:=1),
        TestCase("//-1\n0-10-11", ExpectedResult:=1),
        TestCase("//-1\n0-10-11000", ExpectedResult:=1000),
        TestCase("//-1\n1-10-11000", ExpectedResult:=1001),
        TestCase("//-1\n0-11-11001", ExpectedResult:=1),
        TestCase("//-1\n1-11001-11000", ExpectedResult:=1001),
        TestCase("//-1\n1-12-13", ExpectedResult:=6),
        TestCase("//-1\n1-12-13-14-15-16-17-18-19-110", ExpectedResult:=55),
        TestCase("//[$]\n0$0", ExpectedResult:=0),
        TestCase("//[$]\n1$0", ExpectedResult:=1),
        TestCase("//[$]\n0$1", ExpectedResult:=1),
        TestCase("//[$]\n0$1000", ExpectedResult:=1000),
        TestCase("//[$]\n1$1000", ExpectedResult:=1001),
        TestCase("//[$]\n1$1001", ExpectedResult:=1),
        TestCase("//[$]\n1001$1000", ExpectedResult:=1000),
        TestCase("//[$]\n1$2", ExpectedResult:=3),
        TestCase("//[$]\n0$0$0", ExpectedResult:=0),
        TestCase("//[$]\n1$0$0", ExpectedResult:=1),
        TestCase("//[$]\n0$1$0", ExpectedResult:=1),
        TestCase("//[$]\n0$0$1", ExpectedResult:=1),
        TestCase("//[$]\n0$0$1000", ExpectedResult:=1000),
        TestCase("//[$]\n1$0$1000", ExpectedResult:=1001),
        TestCase("//[$]\n0$1$1001", ExpectedResult:=1),
        TestCase("//[$]\n1$1001$1000", ExpectedResult:=1001),
        TestCase("//[$]\n1$2$3", ExpectedResult:=6),
        TestCase("//[$]\n1$2$3$4$5$6$7$8$9$10", ExpectedResult:=55),
        TestCase("//[$$]\n0$$0", ExpectedResult:=0),
        TestCase("//[$$]\n1$$0", ExpectedResult:=1),
        TestCase("//[$$]\n0$$1", ExpectedResult:=1),
        TestCase("//[$$]\n0$$1000", ExpectedResult:=1000),
        TestCase("//[$$]\n1$$1000", ExpectedResult:=1001),
        TestCase("//[$$]\n1$$1001", ExpectedResult:=1),
        TestCase("//[$$]\n1001$$1000", ExpectedResult:=1000),
        TestCase("//[$$]\n1$$2", ExpectedResult:=3),
        TestCase("//[$$]\n0$$0$$0", ExpectedResult:=0),
        TestCase("//[$$]\n1$$0$$0", ExpectedResult:=1),
        TestCase("//[$$]\n0$$1$$0", ExpectedResult:=1),
        TestCase("//[$$]\n0$$0$$1", ExpectedResult:=1),
        TestCase("//[$$]\n0$$0$$1000", ExpectedResult:=1000),
        TestCase("//[$$]\n1$$0$$1000", ExpectedResult:=1001),
        TestCase("//[$$]\n0$$1$$1001", ExpectedResult:=1),
        TestCase("//[$$]\n1$$1001$$1000", ExpectedResult:=1001),
        TestCase("//[$$]\n1$$2$$3", ExpectedResult:=6),
        TestCase("//[$$]\n1$$2$$3$$4$$5$$6$$7$$8$$9$$10", ExpectedResult:=55),
        TestCase("//[sep]\n0sep0", ExpectedResult:=0),
        TestCase("//[sep]\n1sep0", ExpectedResult:=1),
        TestCase("//[sep]\n0sep1", ExpectedResult:=1),
        TestCase("//[sep]\n0sep1000", ExpectedResult:=1000),
        TestCase("//[sep]\n1sep1000", ExpectedResult:=1001),
        TestCase("//[sep]\n1sep1001", ExpectedResult:=1),
        TestCase("//[sep]\n1001sep1000", ExpectedResult:=1000),
        TestCase("//[sep]\n1sep2", ExpectedResult:=3),
        TestCase("//[sep]\n0sep0sep0", ExpectedResult:=0),
        TestCase("//[sep]\n1sep0sep0", ExpectedResult:=1),
        TestCase("//[sep]\n0sep1sep0", ExpectedResult:=1),
        TestCase("//[sep]\n0sep0sep1", ExpectedResult:=1),
        TestCase("//[sep]\n0sep0sep1000", ExpectedResult:=1000),
        TestCase("//[sep]\n1sep0sep1000", ExpectedResult:=1001),
        TestCase("//[sep]\n0sep1sep1001", ExpectedResult:=1),
        TestCase("//[sep]\n1sep1001sep1000", ExpectedResult:=1001),
        TestCase("//[sep]\n1sep2sep3", ExpectedResult:=6),
        TestCase("//[sep]\n1sep2sep3sep4sep5sep6sep7sep8sep9sep10", ExpectedResult:=55),
        TestCase("//[\n]\n0\n0", ExpectedResult:=0),
        TestCase("//[\n]\n1\n0", ExpectedResult:=1),
        TestCase("//[\n]\n0\n1", ExpectedResult:=1),
        TestCase("//[\n]\n0\n1000", ExpectedResult:=1000),
        TestCase("//[\n]\n1\n1000", ExpectedResult:=1001),
        TestCase("//[\n]\n1\n1001", ExpectedResult:=1),
        TestCase("//[\n]\n1001\n1000", ExpectedResult:=1000),
        TestCase("//[\n]\n1\n2", ExpectedResult:=3),
        TestCase("//[\n]\n0\n0\n0", ExpectedResult:=0),
        TestCase("//[\n]\n1\n0\n0", ExpectedResult:=1),
        TestCase("//[\n]\n0\n1\n0", ExpectedResult:=1),
        TestCase("//[\n]\n0\n0\n1", ExpectedResult:=1),
        TestCase("//[\n]\n0\n0\n1000", ExpectedResult:=1000),
        TestCase("//[\n]\n1\n0\n1000", ExpectedResult:=1001),
        TestCase("//[\n]\n0\n1\n1001", ExpectedResult:=1),
        TestCase("//[\n]\n1\n1001\n1000", ExpectedResult:=1001),
        TestCase("//[\n]\n1\n2\n3", ExpectedResult:=6),
        TestCase("//[\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", ExpectedResult:=55),
        TestCase("//[-]\n0-0", ExpectedResult:=0),
        TestCase("//[-]\n1-0", ExpectedResult:=1),
        TestCase("//[-]\n0-1", ExpectedResult:=1),
        TestCase("//[-]\n0-1000", ExpectedResult:=1000),
        TestCase("//[-]\n1-1000", ExpectedResult:=1001),
        TestCase("//[-]\n1-1001", ExpectedResult:=1),
        TestCase("//[-]\n1001-1000", ExpectedResult:=1000),
        TestCase("//[-]\n1-2", ExpectedResult:=3),
        TestCase("//[-]\n0-0-0", ExpectedResult:=0),
        TestCase("//[-]\n1-0-0", ExpectedResult:=1),
        TestCase("//[-]\n0-1-0", ExpectedResult:=1),
        TestCase("//[-]\n0-0-1", ExpectedResult:=1),
        TestCase("//[-]\n0-0-1000", ExpectedResult:=1000),
        TestCase("//[-]\n1-0-1000", ExpectedResult:=1001),
        TestCase("//[-]\n0-1-1001", ExpectedResult:=1),
        TestCase("//[-]\n1-1001-1000", ExpectedResult:=1001),
        TestCase("//[-]\n1-2-3", ExpectedResult:=6),
        TestCase("//[-]\n1-2-3-4-5-6-7-8-9-10", ExpectedResult:=55),
        TestCase("//[-1]\n0-10", ExpectedResult:=0),
        TestCase("//[-1]\n1-10", ExpectedResult:=1),
        TestCase("//[-1]\n0-11", ExpectedResult:=1),
        TestCase("//[-1]\n0-11000", ExpectedResult:=1000),
        TestCase("//[-1]\n1-11000", ExpectedResult:=1001),
        TestCase("//[-1]\n1-11001", ExpectedResult:=1),
        TestCase("//[-1]\n1001-11000", ExpectedResult:=1000),
        TestCase("//[-1]\n1-12", ExpectedResult:=3),
        TestCase("//[-1]\n0-10-10", ExpectedResult:=0),
        TestCase("//[-1]\n1-10-10", ExpectedResult:=1),
        TestCase("//[-1]\n0-11-10", ExpectedResult:=1),
        TestCase("//[-1]\n0-10-11", ExpectedResult:=1),
        TestCase("//[-1]\n0-10-11000", ExpectedResult:=1000),
        TestCase("//[-1]\n1-10-11000", ExpectedResult:=1001),
        TestCase("//[-1]\n0-11-11001", ExpectedResult:=1),
        TestCase("//[-1]\n1-11001-11000", ExpectedResult:=1001),
        TestCase("//[-1]\n1-12-13", ExpectedResult:=6),
        TestCase("//[-1]\n1-12-13-14-15-16-17-18-19-110", ExpectedResult:=55),
        TestCase("//[-1][-2]\n0-10", ExpectedResult:=0),
        TestCase("//[-1][-2]\n1-10", ExpectedResult:=1),
        TestCase("//[-1][-2]\n0-11", ExpectedResult:=1),
        TestCase("//[-1][-2]\n0-11000", ExpectedResult:=1000),
        TestCase("//[-1][-2]\n1-11000", ExpectedResult:=1001),
        TestCase("//[-1][-2]\n1-11001", ExpectedResult:=1),
        TestCase("//[-1][-2]\n1001-11000", ExpectedResult:=1000),
        TestCase("//[-1][-2]\n1-12", ExpectedResult:=3),
        TestCase("//[-1][-2]\n0-20", ExpectedResult:=0),
        TestCase("//[-1][-2]\n1-20", ExpectedResult:=1),
        TestCase("//[-1][-2]\n0-21", ExpectedResult:=1),
        TestCase("//[-1][-2]\n0-21000", ExpectedResult:=1000),
        TestCase("//[-1][-2]\n1-21000", ExpectedResult:=1001),
        TestCase("//[-1][-2]\n1-21001", ExpectedResult:=1),
        TestCase("//[-1][-2]\n1001-21000", ExpectedResult:=1000),
        TestCase("//[-1][-2]\n1-22", ExpectedResult:=3),
        TestCase("//[-1][-2]\n0-10-20", ExpectedResult:=0),
        TestCase("//[-1][-2]\n1-10-20", ExpectedResult:=1),
        TestCase("//[-1][-2]\n0-11-20", ExpectedResult:=1),
        TestCase("//[-1][-2]\n0-10-21", ExpectedResult:=1),
        TestCase("//[-1][-2]\n0-10-21000", ExpectedResult:=1000),
        TestCase("//[-1][-2]\n1-10-21000", ExpectedResult:=1001),
        TestCase("//[-1][-2]\n0-11-21001", ExpectedResult:=1),
        TestCase("//[-1][-2]\n1-11001-21000", ExpectedResult:=1001),
        TestCase("//[-1][-2]\n1-12-23", ExpectedResult:=6),
        TestCase("//[-1][-2]\n1-12-23-14-25-16-27-18-29-110", ExpectedResult:=55),
        TestCase("//[*][%]\n0*0", ExpectedResult:=0),
        TestCase("//[*][%]\n1*0", ExpectedResult:=1),
        TestCase("//[*][%]\n0*1", ExpectedResult:=1),
        TestCase("//[*][%]\n0*1000", ExpectedResult:=1000),
        TestCase("//[*][%]\n1*1000", ExpectedResult:=1001),
        TestCase("//[*][%]\n1*1001", ExpectedResult:=1),
        TestCase("//[*][%]\n1001*1000", ExpectedResult:=1000),
        TestCase("//[*][%]\n1*2", ExpectedResult:=3),
        TestCase("//[*][%]\n0%0", ExpectedResult:=0),
        TestCase("//[*][%]\n1%0", ExpectedResult:=1),
        TestCase("//[*][%]\n0%1", ExpectedResult:=1),
        TestCase("//[*][%]\n0%1000", ExpectedResult:=1000),
        TestCase("//[*][%]\n1%1000", ExpectedResult:=1001),
        TestCase("//[*][%]\n1%1001", ExpectedResult:=1),
        TestCase("//[*][%]\n1001%1000", ExpectedResult:=1000),
        TestCase("//[*][%]\n1%2", ExpectedResult:=3),
        TestCase("//[*][%]\n0*0%0", ExpectedResult:=0),
        TestCase("//[*][%]\n1*0%0", ExpectedResult:=1),
        TestCase("//[*][%]\n0*1%0", ExpectedResult:=1),
        TestCase("//[*][%]\n0*0%1", ExpectedResult:=1),
        TestCase("//[*][%]\n0*0%1000", ExpectedResult:=1000),
        TestCase("//[*][%]\n1*0%1000", ExpectedResult:=1001),
        TestCase("//[*][%]\n0*1%1001", ExpectedResult:=1),
        TestCase("//[*][%]\n1*1001%1000", ExpectedResult:=1001),
        TestCase("//[*][%]\n1*2%3", ExpectedResult:=6),
        TestCase("//[*][%]\n1*2%3*4%5*6%7*8%9*10", ExpectedResult:=55),
        TestCase("//[**][%%]\n0**0", ExpectedResult:=0),
        TestCase("//[**][%%]\n1**0", ExpectedResult:=1),
        TestCase("//[**][%%]\n0**1", ExpectedResult:=1),
        TestCase("//[**][%%]\n0**1000", ExpectedResult:=1000),
        TestCase("//[**][%%]\n1**1000", ExpectedResult:=1001),
        TestCase("//[**][%%]\n1**1001", ExpectedResult:=1),
        TestCase("//[**][%%]\n1001**1000", ExpectedResult:=1000),
        TestCase("//[**][%%]\n1**2", ExpectedResult:=3),
        TestCase("//[**][%%]\n0%%0", ExpectedResult:=0),
        TestCase("//[**][%%]\n1%%0", ExpectedResult:=1),
        TestCase("//[**][%%]\n0%%1", ExpectedResult:=1),
        TestCase("//[**][%%]\n0%%1000", ExpectedResult:=1000),
        TestCase("//[**][%%]\n1%%1000", ExpectedResult:=1001),
        TestCase("//[**][%%]\n1%%1001", ExpectedResult:=1),
        TestCase("//[**][%%]\n1001%%1000", ExpectedResult:=1000),
        TestCase("//[**][%%]\n1%%2", ExpectedResult:=3),
        TestCase("//[**][%%]\n0**0%%0", ExpectedResult:=0),
        TestCase("//[**][%%]\n1**0%%0", ExpectedResult:=1),
        TestCase("//[**][%%]\n0**1%%0", ExpectedResult:=1),
        TestCase("//[**][%%]\n0**0%%1", ExpectedResult:=1),
        TestCase("//[**][%%]\n0**0%%1000", ExpectedResult:=1000),
        TestCase("//[**][%%]\n1**0%%1000", ExpectedResult:=1001),
        TestCase("//[**][%%]\n0**1%%1001", ExpectedResult:=1),
        TestCase("//[**][%%]\n1**1001%%1000", ExpectedResult:=1001),
        TestCase("//[**][%%]\n1**2%%3", ExpectedResult:=6),
        TestCase("//[**][%%]\n1**2%%3**4%%5**6%%7**8%%9**10", ExpectedResult:=55),
        TestCase("//[sep1][sep2]\n0sep10", ExpectedResult:=0),
        TestCase("//[sep1][sep2]\n1sep10", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n0sep11", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n0sep11000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2]\n1sep11000", ExpectedResult:=1001),
        TestCase("//[sep1][sep2]\n1sep11001", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n1001sep11000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2]\n1sep12", ExpectedResult:=3),
        TestCase("//[sep1][sep2]\n0sep20", ExpectedResult:=0),
        TestCase("//[sep1][sep2]\n1sep20", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n0sep21", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n0sep21000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2]\n1sep21000", ExpectedResult:=1001),
        TestCase("//[sep1][sep2]\n1sep21001", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n1001sep21000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2]\n1sep22", ExpectedResult:=3),
        TestCase("//[sep1][sep2]\n0sep10sep20", ExpectedResult:=0),
        TestCase("//[sep1][sep2]\n1sep10sep20", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n0sep11sep20", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n0sep10sep21", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n0sep10sep21000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2]\n1sep10sep21000", ExpectedResult:=1001),
        TestCase("//[sep1][sep2]\n0sep11sep21001", ExpectedResult:=1),
        TestCase("//[sep1][sep2]\n1sep11001sep21000", ExpectedResult:=1001),
        TestCase("//[sep1][sep2]\n1sep12sep23", ExpectedResult:=6),
        TestCase("//[sep1][sep2]\n1sep12sep23sep14sep25sep16sep27sep18sep29sep110", ExpectedResult:=55),
        TestCase("//[[][]]\n0[0", ExpectedResult:=0),
        TestCase("//[[][]]\n1[0", ExpectedResult:=1),
        TestCase("//[[][]]\n0[1", ExpectedResult:=1),
        TestCase("//[[][]]\n0[1000", ExpectedResult:=1000),
        TestCase("//[[][]]\n1[1000", ExpectedResult:=1001),
        TestCase("//[[][]]\n1[1001", ExpectedResult:=1),
        TestCase("//[[][]]\n1001[1000", ExpectedResult:=1000),
        TestCase("//[[][]]\n1[2", ExpectedResult:=3),
        TestCase("//[[][]]\n0]0", ExpectedResult:=0),
        TestCase("//[[][]]\n1]0", ExpectedResult:=1),
        TestCase("//[[][]]\n0]1", ExpectedResult:=1),
        TestCase("//[[][]]\n0]1000", ExpectedResult:=1000),
        TestCase("//[[][]]\n1]1000", ExpectedResult:=1001),
        TestCase("//[[][]]\n1]1001", ExpectedResult:=1),
        TestCase("//[[][]]\n1001]1000", ExpectedResult:=1000),
        TestCase("//[[][]]\n1]2", ExpectedResult:=3),
        TestCase("//[[][]]\n0[0]0", ExpectedResult:=0),
        TestCase("//[[][]]\n1[0]0", ExpectedResult:=1),
        TestCase("//[[][]]\n0[1]0", ExpectedResult:=1),
        TestCase("//[[][]]\n0[0]1", ExpectedResult:=1),
        TestCase("//[[][]]\n0[0]1000", ExpectedResult:=1000),
        TestCase("//[[][]]\n1[0]1000", ExpectedResult:=1001),
        TestCase("//[[][]]\n0[1]1001", ExpectedResult:=1),
        TestCase("//[[][]]\n1[1001]1000", ExpectedResult:=1001),
        TestCase("//[[][]]\n1[2]3", ExpectedResult:=6),
        TestCase("//[[][]]\n1[2]3[4]5[6]7[8]9[10", ExpectedResult:=55),
        TestCase("//[+][!][#]\n0+0", ExpectedResult:=0),
        TestCase("//[+][!][#]\n1+0", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0+1", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0+1000", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1+1000", ExpectedResult:=1001),
        TestCase("//[+][!][#]\n1+1001", ExpectedResult:=1),
        TestCase("//[+][!][#]\n1001+1000", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1+2", ExpectedResult:=3),
        TestCase("//[+][!][#]\n0!0", ExpectedResult:=0),
        TestCase("//[+][!][#]\n1!0", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0!1", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0!1000", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1!1000", ExpectedResult:=1001),
        TestCase("//[+][!][#]\n1!1001", ExpectedResult:=1),
        TestCase("//[+][!][#]\n1001!1000", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1!2", ExpectedResult:=3),
        TestCase("//[+][!][#]\n0#0", ExpectedResult:=0),
        TestCase("//[+][!][#]\n1#0", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0#1", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0#1000", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1#1000", ExpectedResult:=1001),
        TestCase("//[+][!][#]\n1#1001", ExpectedResult:=1),
        TestCase("//[+][!][#]\n1001#1000", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1#2", ExpectedResult:=3),
        TestCase("//[+][!][#]\n0+0!0#0", ExpectedResult:=0),
        TestCase("//[+][!][#]\n1+0!0#0", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0+1!0#0", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0+0!1#0", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0+0!0#1", ExpectedResult:=1),
        TestCase("//[+][!][#]\n0+0!1000#0", ExpectedResult:=1000),
        TestCase("//[+][!][#]\n1+0!1000#0", ExpectedResult:=1001),
        TestCase("//[+][!][#]\n0+1!1001#0", ExpectedResult:=1),
        TestCase("//[+][!][#]\n1+1001!1000#0", ExpectedResult:=1001),
        TestCase("//[+][!][#]\n1+2!3#4", ExpectedResult:=10),
        TestCase("//[+][!][#]\n1+2!3#4+5!6#7+8!9#10", ExpectedResult:=55),
        TestCase("//[++][!!][##]\n0++0", ExpectedResult:=0),
        TestCase("//[++][!!][##]\n1++0", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0++1", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0++1000", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1++1000", ExpectedResult:=1001),
        TestCase("//[++][!!][##]\n1++1001", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n1001++1000", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1++2", ExpectedResult:=3),
        TestCase("//[++][!!][##]\n0!!0", ExpectedResult:=0),
        TestCase("//[++][!!][##]\n1!!0", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0!!1", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0!!1000", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1!!1000", ExpectedResult:=1001),
        TestCase("//[++][!!][##]\n1!!1001", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n1001!!1000", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1!!2", ExpectedResult:=3),
        TestCase("//[++][!!][##]\n0##0", ExpectedResult:=0),
        TestCase("//[++][!!][##]\n1##0", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0##1", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0##1000", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1##1000", ExpectedResult:=1001),
        TestCase("//[++][!!][##]\n1##1001", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n1001##1000", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1##2", ExpectedResult:=3),
        TestCase("//[++][!!][##]\n0++0!!0##0", ExpectedResult:=0),
        TestCase("//[++][!!][##]\n1++0!!0##0", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0++1!!0##0", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0++0!!1##0", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0++0!!0##1", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n0++0!!1000##0", ExpectedResult:=1000),
        TestCase("//[++][!!][##]\n1++0!!1000##0", ExpectedResult:=1001),
        TestCase("//[++][!!][##]\n0++1!!1001##0", ExpectedResult:=1),
        TestCase("//[++][!!][##]\n1++1001!!1000##0", ExpectedResult:=1001),
        TestCase("//[++][!!][##]\n1++2!!3##4", ExpectedResult:=10),
        TestCase("//[++][!!][##]\n1++2!!3##4++5!!6##7++8!!9##10", ExpectedResult:=55),
        TestCase("//[-1][-2][-3]\n0-10", ExpectedResult:=0),
        TestCase("//[-1][-2][-3]\n1-10", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-11", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-11000", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1-11000", ExpectedResult:=1001),
        TestCase("//[-1][-2][-3]\n1-11001", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n1001-11000", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1-12", ExpectedResult:=3),
        TestCase("//[-1][-2][-3]\n0-20", ExpectedResult:=0),
        TestCase("//[-1][-2][-3]\n1-20", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-21", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-21000", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1-21000", ExpectedResult:=1001),
        TestCase("//[-1][-2][-3]\n1-21001", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n1001-21000", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1-22", ExpectedResult:=3),
        TestCase("//[-1][-2][-3]\n0-30", ExpectedResult:=0),
        TestCase("//[-1][-2][-3]\n1-30", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-31", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-31000", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1-31000", ExpectedResult:=1001),
        TestCase("//[-1][-2][-3]\n1-31001", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n1001-31000", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1-32", ExpectedResult:=3),
        TestCase("//[-1][-2][-3]\n0-10-20-30", ExpectedResult:=0),
        TestCase("//[-1][-2][-3]\n1-10-20-30", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-11-20-30", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-10-21-30", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-10-20-31", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n0-10-21000-30", ExpectedResult:=1000),
        TestCase("//[-1][-2][-3]\n1-10-21000-30", ExpectedResult:=1001),
        TestCase("//[-1][-2][-3]\n0-11-21001-30", ExpectedResult:=1),
        TestCase("//[-1][-2][-3]\n1-11001-21000-30", ExpectedResult:=1001),
        TestCase("//[-1][-2][-3]\n1-12-23-34", ExpectedResult:=10),
        TestCase("//[-1][-2][-3]\n1-12-23-34-15-26-37-18-29-310", ExpectedResult:=55),
        TestCase("//[sep1][sep2][sep3]\n0sep10", ExpectedResult:=0),
        TestCase("//[sep1][sep2][sep3]\n1sep10", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep11", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep11000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1sep11000", ExpectedResult:=1001),
        TestCase("//[sep1][sep2][sep3]\n1sep11001", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n1001sep11000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1sep12", ExpectedResult:=3),
        TestCase("//[sep1][sep2][sep3]\n0sep20", ExpectedResult:=0),
        TestCase("//[sep1][sep2][sep3]\n1sep20", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep21", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep21000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1sep21000", ExpectedResult:=1001),
        TestCase("//[sep1][sep2][sep3]\n1sep21001", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n1001sep21000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1sep22", ExpectedResult:=3),
        TestCase("//[sep1][sep2][sep3]\n0sep30", ExpectedResult:=0),
        TestCase("//[sep1][sep2][sep3]\n1sep30", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep31", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep31000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1sep31000", ExpectedResult:=1001),
        TestCase("//[sep1][sep2][sep3]\n1sep31001", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n1001sep31000", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1sep32", ExpectedResult:=3),
        TestCase("//[sep1][sep2][sep3]\n0sep10sep20sep30", ExpectedResult:=0),
        TestCase("//[sep1][sep2][sep3]\n1sep10sep20sep30", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep11sep20sep30", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep10sep21sep30", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep10sep20sep31", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n0sep10sep21000sep30", ExpectedResult:=1000),
        TestCase("//[sep1][sep2][sep3]\n1sep10sep21000sep30", ExpectedResult:=1001),
        TestCase("//[sep1][sep2][sep3]\n0sep11sep21001sep30", ExpectedResult:=1),
        TestCase("//[sep1][sep2][sep3]\n1sep11001sep21000sep30", ExpectedResult:=1001),
        TestCase("//[sep1][sep2][sep3]\n1sep12sep23sep34", ExpectedResult:=10),
        TestCase("//[sep1][sep2][sep3]\n1sep12sep23sep34sep15sep26sep37sep18sep29sep310", ExpectedResult:=55),
        TestCase("//[?][??][???]\n0?0", ExpectedResult:=0),
        TestCase("//[?][??][???]\n1?0", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0?1", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0?1000", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1?1000", ExpectedResult:=1001),
        TestCase("//[?][??][???]\n1?1001", ExpectedResult:=1),
        TestCase("//[?][??][???]\n1001?1000", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1?2", ExpectedResult:=3),
        TestCase("//[?][??][???]\n0??0", ExpectedResult:=0),
        TestCase("//[?][??][???]\n1??0", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0??1", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0??1000", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1??1000", ExpectedResult:=1001),
        TestCase("//[?][??][???]\n1??1001", ExpectedResult:=1),
        TestCase("//[?][??][???]\n1001??1000", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1??2", ExpectedResult:=3),
        TestCase("//[?][??][???]\n0???0", ExpectedResult:=0),
        TestCase("//[?][??][???]\n1???0", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0???1", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0???1000", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1???1000", ExpectedResult:=1001),
        TestCase("//[?][??][???]\n1???1001", ExpectedResult:=1),
        TestCase("//[?][??][???]\n1001???1000", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1???2", ExpectedResult:=3),
        TestCase("//[?][??][???]\n0?0??0???0", ExpectedResult:=0),
        TestCase("//[?][??][???]\n1?0??0???0", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0?1??0???0", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0?0??1???0", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0?0??0???1", ExpectedResult:=1),
        TestCase("//[?][??][???]\n0?0??1000???0", ExpectedResult:=1000),
        TestCase("//[?][??][???]\n1?0??1000???0", ExpectedResult:=1001),
        TestCase("//[?][??][???]\n0?1??1001???0", ExpectedResult:=1),
        TestCase("//[?][??][???]\n1?1001??1000???0", ExpectedResult:=1001),
        TestCase("//[?][??][???]\n1?2??3???4", ExpectedResult:=10),
        TestCase("//[?][??][???]\n1?2??3???4?5??6???7?8??9???10", ExpectedResult:=55)>
        Public Function Test_Add_Should_ReturnSum_When_CalledWithTwoOrMoreIntegers(input As String) As Integer
            ' Act.
            Dim actualResult = Me.Act_Add(input)

            ' Assert.
            Return actualResult
        End Function

        ''' <summary>
        ''' The Add method should throw an exception when called with an input ending with a separator.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        <Test,
        TestCase("1;"),
        TestCase("1;2;"),
        TestCase("1\n"),
        TestCase("1\n2\n"),
        TestCase("1;2\n"),
        TestCase("1\n2;"),
        TestCase("//$\n1$"),
        TestCase("//$\n1$2$"),
        TestCase("//$$\n1$$"),
        TestCase("//$$\n1$$2$$"),
        TestCase("//sep\n1sep"),
        TestCase("//sep\n1sep2sep"),
        TestCase("//\n\n1\n"),
        TestCase("//\n\n1\n2\n"),
        TestCase("//-\n1-"),
        TestCase("//-\n1-2-"),
        TestCase("//-1\n1-1"),
        TestCase("//-1\n1-12-1"),
        TestCase("//[$]\n1$"),
        TestCase("//[$]\n1$2$"),
        TestCase("//[$$]\n1$$"),
        TestCase("//[$$]\n1$$2$$"),
        TestCase("//[sep]\n1sep"),
        TestCase("//[sep]\n1sep2sep"),
        TestCase("//[\n]\n1\n"),
        TestCase("//[\n]\n1\n2\n"),
        TestCase("//[-]\n1-"),
        TestCase("//[-]\n1-2-"),
        TestCase("//[-1]\n1-1"),
        TestCase("//[-1]\n1-12-1"),
        TestCase("//[-1][-2]\n1-1"),
        TestCase("//[-1][-2]\n1-2"),
        TestCase("//[-1][-2]\n1-12-2"),
        TestCase("//[-1][-2]\n1-22-1"),
        TestCase("//[*][%]\n1*"),
        TestCase("//[*][%]\n1%"),
        TestCase("//[*][%]\n1*2%"),
        TestCase("//[*][%]\n1%2*"),
        TestCase("//[**][%%]\n1**"),
        TestCase("//[**][%%]\n1%%"),
        TestCase("//[**][%%]\n1**2%%"),
        TestCase("//[**][%%]\n1%%2**"),
        TestCase("//[sep1][sep2]\n1sep1"),
        TestCase("//[sep1][sep2]\n1sep2"),
        TestCase("//[sep1][sep2]\n1sep12sep2"),
        TestCase("//[sep1][sep2]\n1sep22sep1"),
        TestCase("//[[][]]\n1["),
        TestCase("//[[][]]\n1]"),
        TestCase("//[[][]]\n1[2]"),
        TestCase("//[[][]]\n1]2["),
        TestCase("//[+][!][#]\n1+"),
        TestCase("//[+][!][#]\n1!"),
        TestCase("//[+][!][#]\n1#"),
        TestCase("//[+][!][#]\n1+2!3#"),
        TestCase("//[++][!!][##]\n1++"),
        TestCase("//[++][!!][##]\n1!!"),
        TestCase("//[++][!!][##]\n1##"),
        TestCase("//[++][!!][##]\n1++2!!3##"),
        TestCase("//[-1][-2][-3]\n1-1"),
        TestCase("//[-1][-2][-3]\n1-2"),
        TestCase("//[-1][-2][-3]\n1-3"),
        TestCase("//[-1][-2][-3]\n1-12-23-3"),
        TestCase("//[sep1][sep2][sep3]\n1sep1"),
        TestCase("//[sep1][sep2][sep3]\n1sep2"),
        TestCase("//[sep1][sep2][sep3]\n1sep3"),
        TestCase("//[sep1][sep2][sep3]\n1sep12sep23sep3"),
        TestCase("//[?][??][???]\n1?"),
        TestCase("//[?][??][???]\n1??"),
        TestCase("//[?][??][???]\n1???"),
        TestCase("//[?][??][???]\n1?2??3???")>
        Public Sub Test_Add_Should_ThrowException_When_CalledWithInputEndingWithSeparator(input As String)
            ' Arrange.
            Dim errorMessage = $"Number expected but EOF found."

            ' Act.
            Dim exception = Assert.Throws(Of Exception)(Function() Me.Act_Add(input))

            ' Assert.
            Assert.AreEqual(errorMessage, exception.Message)
        End Sub

        ''' <summary>
        ''' The Add method should throw an exception when called with an input containing at least one negative number.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <param name="negativesFound">Expected negative numbers in the input.</param>
        <Test,
        TestCase("-1", "-1"),
        TestCase("-1;2", "-1"),
        TestCase("1;-2", "-2"),
        TestCase("-1;-1", "-1, -1"),
        TestCase("-1\n2", "-1"),
        TestCase("1\n-2", "-2"),
        TestCase("-1\n-1", "-1, -1"),
        TestCase("-1\n-2;-1", "-1, -2, -1"),
        TestCase("//$\n-1", "-1"),
        TestCase("//$\n-1$2", "-1"),
        TestCase("//$\n1$-2", "-2"),
        TestCase("//$\n-1$-1", "-1, -1"),
        TestCase("//$$\n-1", "-1"),
        TestCase("//$$\n-1$$2", "-1"),
        TestCase("//$$\n1$$-2", "-2"),
        TestCase("//$$\n-1$$-1", "-1, -1"),
        TestCase("//sep\n-1", "-1"),
        TestCase("//sep\n-1sep2", "-1"),
        TestCase("//sep\n1sep-2", "-2"),
        TestCase("//sep\n-1sep-1", "-1, -1"),
        TestCase("//\n\n-1", "-1"),
        TestCase("//\n\n-1\n2", "-1"),
        TestCase("//\n\n1\n-2", "-2"),
        TestCase("//\n\n-1\n-1", "-1, -1"),
        TestCase("//-1\n-2", "-2"),
        TestCase("//-1\n-2-13", "-2"),
        TestCase("//-1\n2-1-3", "-3"),
        TestCase("//-1\n-2-1-2", "-2, -2"),
        TestCase("//[$]\n-1", "-1"),
        TestCase("//[$]\n-1$2", "-1"),
        TestCase("//[$]\n1$-2", "-2"),
        TestCase("//[$]\n-1$-1", "-1, -1"),
        TestCase("//[$$]\n-1", "-1"),
        TestCase("//[$$]\n-1$$2", "-1"),
        TestCase("//[$$]\n1$$-2", "-2"),
        TestCase("//[$$]\n-1$$-1", "-1, -1"),
        TestCase("//[sep]\n-1", "-1"),
        TestCase("//[sep]\n-1sep2", "-1"),
        TestCase("//[sep]\n1sep-2", "-2"),
        TestCase("//[sep]\n-1sep-1", "-1, -1"),
        TestCase("//[\n]\n-1", "-1"),
        TestCase("//[\n]\n-1\n2", "-1"),
        TestCase("//[\n]\n1\n-2", "-2"),
        TestCase("//[\n]\n-1\n-1", "-1, -1"),
        TestCase("//[-1]\n-2", "-2"),
        TestCase("//[-1]\n-2-13", "-2"),
        TestCase("//[-1]\n2-1-3", "-3"),
        TestCase("//[-1]\n-2-1-3", "-2, -3"),
        TestCase("//[-1][-2]\n-3", "-3"),
        TestCase("//[-1][-2]\n-3-14", "-3"),
        TestCase("//[-1][-2]\n-3-24", "-3"),
        TestCase("//[-1][-2]\n3-1-4", "-4"),
        TestCase("//[-1][-2]\n3-2-4", "-4"),
        TestCase("//[-1][-2]\n-3-1-4", "-3, -4"),
        TestCase("//[-1][-2]\n-3-2-4", "-3, -4"),
        TestCase("//[-1][-2]\n-3-1-4-2-3", "-3, -4, -3"),
        TestCase("//[*][%]\n-1", "-1"),
        TestCase("//[*][%]\n-1*2", "-1"),
        TestCase("//[*][%]\n-1%2", "-1"),
        TestCase("//[*][%]\n1*-2", "-2"),
        TestCase("//[*][%]\n1%-2", "-2"),
        TestCase("//[*][%]\n-1*-2", "-1, -2"),
        TestCase("//[*][%]\n-1%-2", "-1, -2"),
        TestCase("//[*][%]\n-1*-2%-1", "-1, -2, -1"),
        TestCase("//[**][%%]\n-1", "-1"),
        TestCase("//[**][%%]\n-1**2", "-1"),
        TestCase("//[**][%%]\n-1%%2", "-1"),
        TestCase("//[**][%%]\n1**-2", "-2"),
        TestCase("//[**][%%]\n1%%-2", "-2"),
        TestCase("//[**][%%]\n-1**-2", "-1, -2"),
        TestCase("//[**][%%]\n-1%%-2", "-1, -2"),
        TestCase("//[**][%%]\n-1**-2%%-1", "-1, -2, -1"),
        TestCase("//[sep1][sep2]\n-1", "-1"),
        TestCase("//[sep1][sep2]\n-1sep12", "-1"),
        TestCase("//[sep1][sep2]\n-1sep22", "-1"),
        TestCase("//[sep1][sep2]\n1sep1-2", "-2"),
        TestCase("//[sep1][sep2]\n1sep2-2", "-2"),
        TestCase("//[sep1][sep2]\n-1sep1-2", "-1, -2"),
        TestCase("//[sep1][sep2]\n-1sep2-2", "-1, -2"),
        TestCase("//[sep1][sep2]\n-1sep1-2sep2-1", "-1, -2, -1"),
        TestCase("//[[][]]]\n-1", "-1"),
        TestCase("//[[][]]\n-1[2", "-1"),
        TestCase("//[[][]]\n-1]2", "-1"),
        TestCase("//[[][]]\n1[-2", "-2"),
        TestCase("//[[][]]\n1]-2", "-2"),
        TestCase("//[[][]]\n-1[-2", "-1, -2"),
        TestCase("//[[][]]\n-1]-2", "-1, -2"),
        TestCase("//[[][]]\n-1[-2]-1", "-1, -2, -1"),
        TestCase("//[+][!][#]\n-1", "-1"),
        TestCase("//[+][!][#]\n-1+2", "-1"),
        TestCase("//[+][!][#]\n-1!2", "-1"),
        TestCase("//[+][!][#]\n-1#2", "-1"),
        TestCase("//[+][!][#]\n-1+-2!3", "-1, -2"),
        TestCase("//[+][!][#]\n-1!-2#3", "-1, -2"),
        TestCase("//[+][!][#]\n-1#-2+3", "-1, -2"),
        TestCase("//[+][!][#]\n-1+-2!-3#-1", "-1, -2, -3, -1"),
        TestCase("//[++][!!][##]\n-1", "-1"),
        TestCase("//[++][!!][##]\n-1++2", "-1"),
        TestCase("//[++][!!][##]\n-1!!2", "-1"),
        TestCase("//[++][!!][##]\n-1##2", "-1"),
        TestCase("//[++][!!][##]\n-1++-2!!3", "-1, -2"),
        TestCase("//[++][!!][##]\n-1!!-2##3", "-1, -2"),
        TestCase("//[++][!!][##]\n-1##-2++3", "-1, -2"),
        TestCase("//[++][!!][##]\n-1++-2!!-3##-1", "-1, -2, -3, -1"),
        TestCase("//[-1][-2][-3]\n-4", "-4"),
        TestCase("//[-1][-2][-3]\n-4-15", "-4"),
        TestCase("//[-1][-2][-3]\n-4-25", "-4"),
        TestCase("//[-1][-2][-3]\n-4-35", "-4"),
        TestCase("//[-1][-2][-3]\n-4-1-5-26", "-4, -5"),
        TestCase("//[-1][-2][-3]\n-4-2-5-36", "-4, -5"),
        TestCase("//[-1][-2][-3]\n-4-1-5-36", "-4, -5"),
        TestCase("//[-1][-2][-3]\n-4-1-5-2-6-3-4", "-4, -5, -6, -4"),
        TestCase("//[sep1][sep2][sep3]\n-1", "-1"),
        TestCase("//[sep1][sep2][sep3]\n-1sep12", "-1"),
        TestCase("//[sep1][sep2][sep3]\n-1sep22", "-1"),
        TestCase("//[sep1][sep2][sep3]\n-1sep32", "-1"),
        TestCase("//[sep1][sep2][sep3]\n-1sep1-2sep23", "-1, -2"),
        TestCase("//[sep1][sep2][sep3]\n-1sep2-2sep33", "-1, -2"),
        TestCase("//[sep1][sep2][sep3]\n-1sep1-2sep33", "-1, -2"),
        TestCase("//[sep1][sep2][sep3]\n-1sep1-2sep2-3sep3-1", "-1, -2, -3, -1"),
        TestCase("//[?][??][???]\n-1", "-1"),
        TestCase("//[?][??][???]\n-1?2", "-1"),
        TestCase("//[?][??][???]\n-1??2", "-1"),
        TestCase("//[?][??][???]\n-1???2", "-1"),
        TestCase("//[?][??][???]\n-1?-2??3", "-1, -2"),
        TestCase("//[?][??][???]\n-1??-2???3", "-1, -2"),
        TestCase("//[?][??][???]\n-1?-2???3", "-1, -2"),
        TestCase("//[?][??][???]\n-1?-2??-3???-1", "-1, -2, -3, -1")>
        Public Sub Test_Add_Should_ThrowException_When_CalledWithInputContainingNegativeNumber(input As String, negativesFound As String)
            ' Arrange.
            Dim errorMessage = $"Negatives not allowed : {negativesFound}"

            ' Act.
            Dim exception = Assert.Throws(Of Exception)(Function() Me.Act_Add(input))

            ' Assert.
            Assert.AreEqual(errorMessage, exception.Message)
        End Sub

        ''' <summary>
        ''' The Add method should throw an exception when called with an input containing an unspecified separator.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <param name="supportedSeparators">Expected specified separators in the input.</param>
        ''' <param name="unsupportedSeparator">Expected unspecified separator in the input.</param>
        ''' <param name="position">Expected position of the unspecified separator.</param>
        <Test,
        TestCase("1$2", ";' or '\n", "$", 1),
        TestCase("//$\n1;2", "$", ";", 1),
        TestCase("//$$\n1;2", "$$", ";", 1),
        TestCase("//sep\n1|2", "sep", "|", 1),
        TestCase("//\n\n1|2", "\n", "|", 1),
        TestCase("//-\n1|2", "-", "|", 1),
        TestCase("//-1\n1|2", "-1", "|", 1),
        TestCase("//[$]\n1;2", "$", ";", 1),
        TestCase("//[$$]\n1;2", "$$", ";", 1),
        TestCase("//[sep]\n1|2", "sep", "|", 1),
        TestCase("//[\n]\n1|2", "\n", "|", 1),
        TestCase("//[-]\n1|2", "-", "|", 1),
        TestCase("//[-1]\n1|2", "-1", "|", 1),
        TestCase("//[-1][-2]\n1|2", "-1' or '-2", "|", 1),
        TestCase("//[*][%]\n1=2", "*' or '%", "=", 1),
        TestCase("//[**][%%]\n1=2", "**' or '%%", "=", 1),
        TestCase("//[sep1][sep2]\n1del2", "sep1' or 'sep2", "del", 1),
        TestCase("//[[][]]\n1{2", "[' or ']", "{", 1),
        TestCase("//[+][!][#]\n1=2", "+' or '!' or '#", "=", 1),
        TestCase("//[++][!!][##]\n1=2", "++' or '!!' or '##", "=", 1),
        TestCase("//[-1][-2][-3]\n1=2", "-1' or '-2' or '-3", "=", 1),
        TestCase("//[sep1][sep2][sep3]\n1=2", "sep1' or 'sep2' or 'sep3", "=", 1),
        TestCase("//[?][??][???]\n1=2", "???' or '??' or '?", "=", 1)>
        Public Sub Test_Add_Should_ThrowException_When_CalledWithInputContainsUnsupportedSeparator(input As String, supportedSeparators As String, unsupportedSeparator As String, position As Integer)
            ' Arrange.
            Dim errorMessage = $"'{supportedSeparators}' expected but '{unsupportedSeparator}' found at position {position}."

            ' Act.
            Dim exception = Assert.Throws(Of Exception)(Function() Me.Act_Add(input))

            ' Assert.
            Assert.AreEqual(errorMessage, exception.Message)
        End Sub

        ''' <summary>
        ''' The Add method should throw an exception when called with an input starting with a separator or containing multiple separators following each other.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <param name="unexpectedSeparator">Expected unexpected separator in the input.</param>
        ''' <param name="position">Expected position of the unexpected separator.</param>
        <Test,
        TestCase(";1;2", ";", 0),
        TestCase("1;;2", ";", 2),
        TestCase("\n1\n2", "\n", 0),
        TestCase("1\n\n2", "\n", 3),
        TestCase(";1\n2", ";", 0),
        TestCase("\n1;2", "\n", 0),
        TestCase("1\n;2", ";", 3),
        TestCase("1;\n2", "\n", 2),
        TestCase("//$\n$1$2", "$", 0),
        TestCase("//$\n1$$2", "$", 2),
        TestCase("//$$\n$$1$$2", "$$", 0),
        TestCase("//$$\n1$$$$2", "$$", 3),
        TestCase("//sep\nsep1sep2", "sep", 0),
        TestCase("//sep\n1sepsep2", "sep", 4),
        TestCase("//\n\n\n1\n2", "\n", 0),
        TestCase("//\n\n1\n\n2", "\n", 3),
        TestCase("//-\n-1-2", "-", 0),
        TestCase("//-\n1--2", "-", 2),
        TestCase("//-1\n-11-12", "-1", 0),
        TestCase("//-1\n1-1-12", "-1", 3),
        TestCase("//[$]\n$1$2", "$", 0),
        TestCase("//[$]\n1$$2", "$", 2),
        TestCase("//[$$]\n$$1$$2", "$$", 0),
        TestCase("//[$$]\n1$$$$2", "$$", 3),
        TestCase("//[sep]\nsep1sep2", "sep", 0),
        TestCase("//[sep]\n1sepsep2", "sep", 4),
        TestCase("//[\n]\n\n1\n2", "\n", 0),
        TestCase("//[\n]\n1\n\n2", "\n", 3),
        TestCase("//[-]\n-1-2", "-", 0),
        TestCase("//[-]\n1--2", "-", 2),
        TestCase("//[-1]\n-11-12", "-1", 0),
        TestCase("//[-1]\n1-1-12", "-1", 3),
        TestCase("//[-1][-2]\n-11-12", "-1", 0),
        TestCase("//[-1][-2]\n1-1-12", "-1", 3),
        TestCase("//[-1][-2]\n-21-22", "-2", 0),
        TestCase("//[-1][-2]\n1-2-22", "-2", 3),
        TestCase("//[-1][-2]\n-11-22", "-1", 0),
        TestCase("//[-1][-2]\n-21-12", "-2", 0),
        TestCase("//[-1][-2]\n1-2-12", "-1", 3),
        TestCase("//[-1][-2]\n1-1-22", "-2", 3),
        TestCase("//[*][%]\n*1*2", "*", 0),
        TestCase("//[*][%]\n1**2", "*", 2),
        TestCase("//[*][%]\n%1%2", "%", 0),
        TestCase("//[*][%]\n1%%2", "%", 2),
        TestCase("//[*][%]\n*1%2", "*", 0),
        TestCase("//[*][%]\n%1*2", "%", 0),
        TestCase("//[*][%]\n1%*2", "*", 2),
        TestCase("//[*][%]\n1*%2", "%", 2),
        TestCase("//[**][%%]\n**1**2", "**", 0),
        TestCase("//[**][%%]\n1****2", "**", 3),
        TestCase("//[**][%%]\n%%1%%2", "%%", 0),
        TestCase("//[**][%%]\n1%%%%2", "%%", 3),
        TestCase("//[**][%%]\n**1%%2", "**", 0),
        TestCase("//[**][%%]\n%%1**2", "%%", 0),
        TestCase("//[**][%%]\n1%%**2", "**", 3),
        TestCase("//[**][%%]\n1**%%2", "%%", 3),
        TestCase("//[sep1][sep2]\nsep11sep12", "sep1", 0),
        TestCase("//[sep1][sep2]\n1sep1sep12", "sep1", 5),
        TestCase("//[sep1][sep2]\nsep21sep22", "sep2", 0),
        TestCase("//[sep1][sep2]\n1sep2sep22", "sep2", 5),
        TestCase("//[sep1][sep2]\nsep11sep22", "sep1", 0),
        TestCase("//[sep1][sep2]\nsep21sep12", "sep2", 0),
        TestCase("//[sep1][sep2]\n1sep2sep12", "sep1", 5),
        TestCase("//[sep1][sep2]\n1sep1sep22", "sep2", 5),
        TestCase("//[[][]]\n[1[2", "[", 0),
        TestCase("//[[][]]\n1[[2", "[", 2),
        TestCase("//[[][]]\n]1]2", "]", 0),
        TestCase("//[[][]]\n1]]2", "]", 2),
        TestCase("//[[][]]\n[1]2", "[", 0),
        TestCase("//[[][]]\n]1[2", "]", 0),
        TestCase("//[[][]]\n1][2", "[", 2),
        TestCase("//[[][]]\n1[]2", "]", 2),
        TestCase("//[+][!][#]\n+1+2", "+", 0),
        TestCase("//[+][!][#]\n1++2", "+", 2),
        TestCase("//[+][!][#]\n!1!2", "!", 0),
        TestCase("//[+][!][#]\n1!!2", "!", 2),
        TestCase("//[+][!][#]\n#1#2", "#", 0),
        TestCase("//[+][!][#]\n1##2", "#", 2),
        TestCase("//[+][!][#]\n+1!2", "+", 0),
        TestCase("//[+][!][#]\n!1#2", "!", 0),
        TestCase("//[+][!][#]\n#1+2", "#", 0),
        TestCase("//[+][!][#]\n1+!2", "!", 2),
        TestCase("//[+][!][#]\n1!#2", "#", 2),
        TestCase("//[+][!][#]\n1#+2", "+", 2),
        TestCase("//[++][!!][##]\n++1++2", "++", 0),
        TestCase("//[++][!!][##]\n1++++2", "++", 3),
        TestCase("//[++][!!][##]\n!!1!!2", "!!", 0),
        TestCase("//[++][!!][##]\n1!!!!2", "!!", 3),
        TestCase("//[++][!!][##]\n##1##2", "##", 0),
        TestCase("//[++][!!][##]\n1####2", "##", 3),
        TestCase("//[++][!!][##]\n++1!!2", "++", 0),
        TestCase("//[++][!!][##]\n!!1##2", "!!", 0),
        TestCase("//[++][!!][##]\n##1++2", "##", 0),
        TestCase("//[++][!!][##]\n1++!!2", "!!", 3),
        TestCase("//[++][!!][##]\n1!!##2", "##", 3),
        TestCase("//[++][!!][##]\n1##++2", "++", 3),
        TestCase("//[-1][-2][-3]\n-11-12", "-1", 0),
        TestCase("//[-1][-2][-3]\n1-1-12", "-1", 3),
        TestCase("//[-1][-2][-3]\n-21-22", "-2", 0),
        TestCase("//[-1][-2][-3]\n1-2-22", "-2", 3),
        TestCase("//[-1][-2][-3]\n-31-32", "-3", 0),
        TestCase("//[-1][-2][-3]\n1-3-32", "-3", 3),
        TestCase("//[-1][-2][-3]\n-11-22", "-1", 0),
        TestCase("//[-1][-2][-3]\n-21-32", "-2", 0),
        TestCase("//[-1][-2][-3]\n-31-12", "-3", 0),
        TestCase("//[-1][-2][-3]\n1-1-22", "-2", 3),
        TestCase("//[-1][-2][-3]\n1-2-32", "-3", 3),
        TestCase("//[-1][-2][-3]\n1-3-12", "-1", 3),
        TestCase("//[sep1][sep2][sep3]\nsep11sep12", "sep1", 0),
        TestCase("//[sep1][sep2][sep3]\n1sep1sep12", "sep1", 5),
        TestCase("//[sep1][sep2][sep3]\nsep21sep22", "sep2", 0),
        TestCase("//[sep1][sep2][sep3]\n1sep2sep22", "sep2", 5),
        TestCase("//[sep1][sep2][sep3]\nsep31sep32", "sep3", 0),
        TestCase("//[sep1][sep2][sep3]\n1sep3sep32", "sep3", 5),
        TestCase("//[sep1][sep2][sep3]\nsep11sep22", "sep1", 0),
        TestCase("//[sep1][sep2][sep3]\nsep21sep32", "sep2", 0),
        TestCase("//[sep1][sep2][sep3]\nsep31sep12", "sep3", 0),
        TestCase("//[sep1][sep2][sep3]\n1sep1sep22", "sep2", 5),
        TestCase("//[sep1][sep2][sep3]\n1sep2sep32", "sep3", 5),
        TestCase("//[sep1][sep2][sep3]\n1sep3sep12", "sep1", 5),
        TestCase("//[?][??][???]\n?1?2", "?", 0),
        TestCase("//[?][??][???]\n??1??2", "??", 0),
        TestCase("//[?][??][???]\n1????2", "?", 4),
        TestCase("//[?][??][???]\n???1???2", "???", 0),
        TestCase("//[?][??][???]\n1??????2", "???", 4),
        TestCase("//[?][??][???]\n?1??2", "?", 0),
        TestCase("//[?][??][???]\n??1???2", "??", 0),
        TestCase("//[?][??][???]\n???1?2", "???", 0),
        TestCase("//[?][??][???]\n1?????2", "??", 4),
        TestCase("//[?][??][???]\n1????2", "?", 4)>
        Public Sub Test_Add_Should_ThrowException_When_CalledWithInputContainsTwoOrMoreSeparatorsNext(input As String, unexpectedSeparator As String, position As Integer)
            ' Arrange.
            Dim errorMessage = $"Number expected but '{unexpectedSeparator}' found at position {position}."

            ' Act.
            Dim exception = Assert.Throws(Of Exception)(Function() Me.Act_Add(input))

            ' Assert.
            Assert.AreEqual(errorMessage, exception.Message)
        End Sub

        ''' <summary>
        ''' The Add method should throw an exception when called with an input containing multiple errors.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <param name="negativesFound">Expected negative numbers in the input.</param>
        ''' <param name="supportedSeparators">Expected specified separators in the input.</param>
        ''' <param name="unsupportedSeparator">Expected unspecified separator in the input.</param>
        ''' <param name="unsupportedPosition">Expected position of the unspecified separator.</param>
        ''' <param name="unexpectedSeparator">Expected unexpected separator in the input.</param>
        ''' <param name="position">Expected position of the unexpected separator.</param>
        <Test,
        TestCase("-1\n;|2;", "-1", ";' or '\n", "|", 5, ";", 4),
        TestCase("//$\n-1$$|2$", "-1", "$", "|", 4, "$", 3),
        TestCase("//$$\n-1$$$$|2$$", "-1", "$$", "|", 6, "$$", 4),
        TestCase("//sep\n-1sepsep|2sep", "-1", "sep", "|", 8, "sep", 5),
        TestCase("//\n\n-1\n\n|2\n", "-1", "\n", "|", 6, "\n", 4),
        TestCase("//-1\n-2-1-1|2-1", "-2", "-1", "|", 6, "-1", 4),
        TestCase("//[$]\n-1$$|2$", "-1", "$", "|", 4, "$", 3),
        TestCase("//[$$]\n-1$$$$|2$$", "-1", "$$", "|", 6, "$$", 4),
        TestCase("//[sep]\n-1sepsep|2sep", "-1", "sep", "|", 8, "sep", 5),
        TestCase("//[\n]\n-1\n\n|2\n", "-1", "\n", "|", 6, "\n", 4),
        TestCase("//[-1]\n-2-1-1|2-1", "-2", "-1", "|", 6, "-1", 4),
        TestCase("//[-1][-2]\n-3-2-1|2-2", "-3", "-1' or '-2", "|", 6, "-1", 4),
        TestCase("//[*][%]\n-1%*|2%", "-1", "*' or '%", "|", 4, "*", 3),
        TestCase("//[**][%%]\n-1%%**|2%%", "-1", "**' or '%%", "|", 6, "**", 4),
        TestCase("//[sep1][sep2]\n-1sep2sep1|2sep2", "-1", "sep1' or 'sep2", "|", 10, "sep1", 6),
        TestCase("//[[][]]\n-1][|2]", "-1", "[' or ']", "|", 4, "[", 3),
        TestCase("//[+][!][#]\n-1#!|2+", "-1", "+' or '!' or '#", "|", 4, "!", 3),
        TestCase("//[++][!!][##]\n-1##!!|2++", "-1", "++' or '!!' or '##", "|", 6, "!!", 4),
        TestCase("//[-1][-2][-3]\n-4-3-2|2-1", "-4", "-1' or '-2' or '-3", "|", 6, "-2", 4),
        TestCase("//[sep1][sep2][sep3]\n-1sep3sep2|2sep1", "-1", "sep1' or 'sep2' or 'sep3", "|", 10, "sep2", 6),
        TestCase("//[?][??][???]\n-1?????|2?", "-1", "???' or '??' or '?", "|", 7, "??", 5)>
        Public Sub Test_Add_Should_ThrowException_When_CalledWithInputContainsMultipleErrors(input As String, negativesFound As String, supportedSeparators As String, unsupportedSeparator As String, unsupportedPosition As Integer, unexpectedSeparator As String, unexpectedPosition As Integer)
            ' Arrange.
            Dim errorMessage = $"Negatives not allowed : {negativesFound}\n'{supportedSeparators}' expected but '{unsupportedSeparator}' found at position {unsupportedPosition}.\nNumber expected but '{unexpectedSeparator}' found at position {unexpectedPosition}.\nNumber expected but EOF found."

            ' Act.
            Dim Exception = Assert.Throws(Of Exception)(Function() Me.Act_Add(input))

            ' Assert.
            Assert.AreEqual(errorMessage, Exception.Message)
        End Sub

#End Region

#Region "Protected Methods"

        ''' <summary>
        ''' Invokes the Add method with the provided test input.
        ''' </summary>
        ''' <param name="input">The test case input.</param>
        ''' <returns>The result of the method.</returns>
        Protected Function Act_Add(input As String) As Integer
            Dim stringCalculator = New StringCalculator()

            Return stringCalculator.Add(input)
        End Function

#End Region

#End Region
    End Class
End Namespace
