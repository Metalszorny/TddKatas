using System;
using Common;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Test
{
    /// <summary>
    /// Unit tests for the string calculator class.
    /// </summary>
    [TestClass]
    public class StringCalculatorTests
    {
        #region Methods

        #region Public Methods

        /// <summary>
        /// Sets up test dependencies.
        /// </summary>
        [TestInitialize]
        public void Setup()
        { }

        /// <summary>
        /// Cleans up test dependencies.
        /// </summary>
        [TestCleanup]
        public void Teardown()
        { }

        /// <summary>
        /// The Add method should return 0 when called with null, empty string, whitespace or custom separator declaration.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <param name="expectedResult">The expected result.</param>
        [TestMethod]
        [DataRow(null, 0)]
        [DataRow("", 0)]
        [DataRow(" ", 0)]
        [DataRow("//$\n", 0)]
        [DataRow("//$$\n", 0)]
        [DataRow("//sep\n", 0)]
        [DataRow("//\n\n", 0)]
        [DataRow("//-\n", 0)]
        [DataRow("//-1\n", 0)]
        [DataRow("//[$]\n", 0)]
        [DataRow("//[$$]\n", 0)]
        [DataRow("//[sep]\n", 0)]
        [DataRow("//[\n]\n", 0)]
        [DataRow("//[-]\n", 0)]
        [DataRow("//[-1]\n", 0)]
        [DataRow("//[-1][-2]\n", 0)]
        [DataRow("//[*][%]\n", 0)]
        [DataRow("//[**][%%]\n", 0)]
        [DataRow("//[sep1][sep2]\n", 0)]
        [DataRow("//[[][]]\n", 0)]
        [DataRow("//[+][!][#]\n", 0)]
        [DataRow("//[++][!!][##]\n", 0)]
        [DataRow("//[-1][-2][-3]\n", 0)]
        [DataRow("//[sep1][sep2][sep3]\n", 0)]
        [DataRow("//[?][??][???]\n", 0)]
        public void Test_Add_Should_ReturnZero_When_CalledWithNullOrEmptyStringOrWhitespaceOrSeparatorDeclaration(string input, int expectedResult)
        {
            // Act.
            var actualResult = this.Act_Add(input);

            // Assert.
            Assert.AreEqual(expectedResult, actualResult);
        }

        /// <summary>
        /// The Add method should return the input when called with a single integer number.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <param name="expectedResult">The expected result.</param>
        [TestMethod]
        [DataRow("0", 0)]
        [DataRow("1", 1)]
        [DataRow("1000", 1000)]
        [DataRow("1001", 0)]
        [DataRow("//$\n0", 0)]
        [DataRow("//$\n1", 1)]
        [DataRow("//$\n1000", 1000)]
        [DataRow("//$\n1001", 0)]
        [DataRow("//$$\n0", 0)]
        [DataRow("//$$\n1", 1)]
        [DataRow("//$$\n1000", 1000)]
        [DataRow("//$$\n1001", 0)]
        [DataRow("//sep\n0", 0)]
        [DataRow("//sep\n1", 1)]
        [DataRow("//sep\n1000", 1000)]
        [DataRow("//sep\n1001", 0)]
        [DataRow("//\n\n0", 0)]
        [DataRow("//\n\n1", 1)]
        [DataRow("//\n\n1000", 1000)]
        [DataRow("//\n\n1001", 0)]
        [DataRow("//-\n0", 0)]
        [DataRow("//-\n1", 1)]
        [DataRow("//-\n1000", 1000)]
        [DataRow("//-\n1001", 0)]
        [DataRow("//-1\n0", 0)]
        [DataRow("//-1\n1", 1)]
        [DataRow("//-1\n1000", 1000)]
        [DataRow("//-1\n1001", 0)]
        [DataRow("//[$]\n0", 0)]
        [DataRow("//[$]\n1", 1)]
        [DataRow("//[$]\n1000", 1000)]
        [DataRow("//[$]\n1001", 0)]
        [DataRow("//[$$]\n0", 0)]
        [DataRow("//[$$]\n1", 1)]
        [DataRow("//[$$]\n1000", 1000)]
        [DataRow("//[$$]\n1001", 0)]
        [DataRow("//[sep]\n0", 0)]
        [DataRow("//[sep]\n1", 1)]
        [DataRow("//[sep]\n1000", 1000)]
        [DataRow("//[sep]\n1001", 0)]
        [DataRow("//[\n]\n0", 0)]
        [DataRow("//[\n]\n1", 1)]
        [DataRow("//[\n]\n1000", 1000)]
        [DataRow("//[\n]\n1001", 0)]
        [DataRow("//[-]\n0", 0)]
        [DataRow("//[-]\n1", 1)]
        [DataRow("//[-]\n1000", 1000)]
        [DataRow("//[-]\n1001", 0)]
        [DataRow("//[-1]\n0", 0)]
        [DataRow("//[-1]\n1", 1)]
        [DataRow("//[-1]\n1000", 1000)]
        [DataRow("//[-1]\n1001", 0)]
        [DataRow("//[-1][-2]\n0", 0)]
        [DataRow("//[-1][-2]\n1", 1)]
        [DataRow("//[-1][-2]\n1000", 1000)]
        [DataRow("//[-1][-2]\n1001", 0)]
        [DataRow("//[*][%]\n0", 0)]
        [DataRow("//[*][%]\n1", 1)]
        [DataRow("//[*][%]\n1000", 1000)]
        [DataRow("//[*][%]\n1001", 0)]
        [DataRow("//[**][%%]\n0", 0)]
        [DataRow("//[**][%%]\n1", 1)]
        [DataRow("//[**][%%]\n1000", 1000)]
        [DataRow("//[**][%%]\n1001", 0)]
        [DataRow("//[sep1][sep2]\n0", 0)]
        [DataRow("//[sep1][sep2]\n1", 1)]
        [DataRow("//[sep1][sep2]\n1000", 1000)]
        [DataRow("//[sep1][sep2]\n1001", 0)]
        [DataRow("//[[][]]\n0", 0)]
        [DataRow("//[[][]]\n1", 1)]
        [DataRow("//[[][]]\n1000", 1000)]
        [DataRow("//[[][]]\n1001", 0)]
        [DataRow("//[+][!][#]\n0", 0)]
        [DataRow("//[+][!][#]\n1", 1)]
        [DataRow("//[+][!][#]\n1000", 1000)]
        [DataRow("//[+][!][#]\n1001", 0)]
        [DataRow("//[++][!!][##]\n0", 0)]
        [DataRow("//[++][!!][##]\n1", 1)]
        [DataRow("//[++][!!][##]\n1000", 1000)]
        [DataRow("//[++][!!][##]\n1001", 0)]
        [DataRow("//[-1][-2][-3]\n0", 0)]
        [DataRow("//[-1][-2][-3]\n1", 1)]
        [DataRow("//[-1][-2][-3]\n1000", 1000)]
        [DataRow("//[-1][-2][-3]\n1001", 0)]
        [DataRow("//[sep1][sep2][sep3]\n0", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1", 1)]
        [DataRow("//[sep1][sep2][sep3]\n1000", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1001", 0)]
        [DataRow("//[?][??][???]\n0", 0)]
        [DataRow("//[?][??][???]\n1", 1)]
        [DataRow("//[?][??][???]\n1000", 1000)]
        [DataRow("//[?][??][???]\n1001", 0)]
        public void Test_Add_Should_ReturnInput_When_CalledWithSingleInteger(string input, int expectedResult)
        {
            // Act.
            var actualResult = this.Act_Add(input);

            // Assert.
            Assert.AreEqual(expectedResult, actualResult);
        }

        /// <summary>
        /// The Add method should return the sum of the input when called with a multiple positive integer numbers up to 1000.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <param name="expectedResult">The expected result.</param>
        [TestMethod]
        [DataRow("0;0", 0)]
        [DataRow("1;0", 1)]
        [DataRow("0;1", 1)]
        [DataRow("0;1000", 1000)]
        [DataRow("1;1000", 1001)]
        [DataRow("1;1001", 1)]
        [DataRow("1001;1000", 1000)]
        [DataRow("1;2", 3)]
        [DataRow("0\n0", 0)]
        [DataRow("1\n0", 1)]
        [DataRow("0\n1", 1)]
        [DataRow("0\n1000", 1000)]
        [DataRow("1\n1000", 1001)]
        [DataRow("1\n1001", 1)]
        [DataRow("1001\n1000", 1000)]
        [DataRow("1\n2", 3)]
        [DataRow("0\n0;0", 0)]
        [DataRow("1\n0;0", 1)]
        [DataRow("0\n1;0", 1)]
        [DataRow("0\n0;1", 1)]
        [DataRow("0\n0;1000", 1000)]
        [DataRow("1\n0;1000", 1001)]
        [DataRow("0\n1;1001", 1)]
        [DataRow("1\n1001;1000", 1001)]
        [DataRow("1;2\n3", 6)]
        [DataRow("1;2\n3;4\n5;6\n7;8\n9;10", 55)]
        [DataRow("//$\n0$0", 0)]
        [DataRow("//$\n1$0", 1)]
        [DataRow("//$\n0$1", 1)]
        [DataRow("//$\n0$1000", 1000)]
        [DataRow("//$\n1$1000", 1001)]
        [DataRow("//$\n1$1001", 1)]
        [DataRow("//$\n1001$1000", 1000)]
        [DataRow("//$\n1$2", 3)]
        [DataRow("//$\n0$0$0", 0)]
        [DataRow("//$\n1$0$0", 1)]
        [DataRow("//$\n0$1$0", 1)]
        [DataRow("//$\n0$0$1", 1)]
        [DataRow("//$\n0$0$1000", 1000)]
        [DataRow("//$\n1$0$1000", 1001)]
        [DataRow("//$\n0$1$1001", 1)]
        [DataRow("//$\n1$1001$1000", 1001)]
        [DataRow("//$\n1$2$3", 6)]
        [DataRow("//$\n1$2$3$4$5$6$7$8$9$10", 55)]
        [DataRow("//$$\n0$$0", 0)]
        [DataRow("//$$\n1$$0", 1)]
        [DataRow("//$$\n0$$1", 1)]
        [DataRow("//$$\n0$$1000", 1000)]
        [DataRow("//$$\n1$$1000", 1001)]
        [DataRow("//$$\n1$$1001", 1)]
        [DataRow("//$$\n1001$$1000", 1000)]
        [DataRow("//$$\n1$$2", 3)]
        [DataRow("//$$\n0$$0$$0", 0)]
        [DataRow("//$$\n1$$0$$0", 1)]
        [DataRow("//$$\n0$$1$$0", 1)]
        [DataRow("//$$\n0$$0$$1", 1)]
        [DataRow("//$$\n0$$0$$1000", 1000)]
        [DataRow("//$$\n1$$0$$1000", 1001)]
        [DataRow("//$$\n0$$1$$1001", 1)]
        [DataRow("//$$\n1$$1001$$1000", 1001)]
        [DataRow("//$$\n1$$2$$3", 6)]
        [DataRow("//$$\n1$$2$$3$$4$$5$$6$$7$$8$$9$$10", 55)]
        [DataRow("//sep\n0sep0", 0)]
        [DataRow("//sep\n1sep0", 1)]
        [DataRow("//sep\n0sep1", 1)]
        [DataRow("//sep\n0sep1000", 1000)]
        [DataRow("//sep\n1sep1000", 1001)]
        [DataRow("//sep\n1sep1001", 1)]
        [DataRow("//sep\n1001sep1000", 1000)]
        [DataRow("//sep\n1sep2", 3)]
        [DataRow("//sep\n0sep0sep0", 0)]
        [DataRow("//sep\n1sep0sep0", 1)]
        [DataRow("//sep\n0sep1sep0", 1)]
        [DataRow("//sep\n0sep0sep1", 1)]
        [DataRow("//sep\n0sep0sep1000", 1000)]
        [DataRow("//sep\n1sep0sep1000", 1001)]
        [DataRow("//sep\n0sep1sep1001", 1)]
        [DataRow("//sep\n1sep1001sep1000", 1001)]
        [DataRow("//sep\n1sep2sep3", 6)]
        [DataRow("//sep\n1sep2sep3sep4sep5sep6sep7sep8sep9sep10", 55)]
        [DataRow("//\n\n0\n0", 0)]
        [DataRow("//\n\n1\n0", 1)]
        [DataRow("//\n\n0\n1", 1)]
        [DataRow("//\n\n0\n1000", 1000)]
        [DataRow("//\n\n1\n1000", 1001)]
        [DataRow("//\n\n1\n1001", 1)]
        [DataRow("//\n\n1001\n1000", 1000)]
        [DataRow("//\n\n1\n2", 3)]
        [DataRow("//\n\n0\n0\n0", 0)]
        [DataRow("//\n\n1\n0\n0", 1)]
        [DataRow("//\n\n0\n1\n0", 1)]
        [DataRow("//\n\n0\n0\n1", 1)]
        [DataRow("//\n\n0\n0\n1000", 1000)]
        [DataRow("//\n\n1\n0\n1000", 1001)]
        [DataRow("//\n\n0\n1\n1001", 1)]
        [DataRow("//\n\n1\n1001\n1000", 1001)]
        [DataRow("//\n\n1\n2\n3", 6)]
        [DataRow("//\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", 55)]
        [DataRow("//-\n0-0", 0)]
        [DataRow("//-\n1-0", 1)]
        [DataRow("//-\n0-1", 1)]
        [DataRow("//-\n0-1000", 1000)]
        [DataRow("//-\n1-1000", 1001)]
        [DataRow("//-\n1-1001", 1)]
        [DataRow("//-\n1001-1000", 1000)]
        [DataRow("//-\n1-2", 3)]
        [DataRow("//-\n0-0-0", 0)]
        [DataRow("//-\n1-0-0", 1)]
        [DataRow("//-\n0-1-0", 1)]
        [DataRow("//-\n0-0-1", 1)]
        [DataRow("//-\n0-0-1000", 1000)]
        [DataRow("//-\n1-0-1000", 1001)]
        [DataRow("//-\n0-1-1001", 1)]
        [DataRow("//-\n1-1001-1000", 1001)]
        [DataRow("//-\n1-2-3", 6)]
        [DataRow("//-\n1-2-3-4-5-6-7-8-9-10", 55)]
        [DataRow("//-1\n0-10", 0)]
        [DataRow("//-1\n1-10", 1)]
        [DataRow("//-1\n0-11", 1)]
        [DataRow("//-1\n0-11000", 1000)]
        [DataRow("//-1\n1-11000", 1001)]
        [DataRow("//-1\n1-11001", 1)]
        [DataRow("//-1\n1001-11000", 1000)]
        [DataRow("//-1\n1-12", 3)]
        [DataRow("//-1\n0-10-10", 0)]
        [DataRow("//-1\n1-10-10", 1)]
        [DataRow("//-1\n0-11-10", 1)]
        [DataRow("//-1\n0-10-11", 1)]
        [DataRow("//-1\n0-10-11000", 1000)]
        [DataRow("//-1\n1-10-11000", 1001)]
        [DataRow("//-1\n0-11-11001", 1)]
        [DataRow("//-1\n1-11001-11000", 1001)]
        [DataRow("//-1\n1-12-13", 6)]
        [DataRow("//-1\n1-12-13-14-15-16-17-18-19-110", 55)]
        [DataRow("//[$]\n0$0", 0)]
        [DataRow("//[$]\n1$0", 1)]
        [DataRow("//[$]\n0$1", 1)]
        [DataRow("//[$]\n0$1000", 1000)]
        [DataRow("//[$]\n1$1000", 1001)]
        [DataRow("//[$]\n1$1001", 1)]
        [DataRow("//[$]\n1001$1000", 1000)]
        [DataRow("//[$]\n1$2", 3)]
        [DataRow("//[$]\n0$0$0", 0)]
        [DataRow("//[$]\n1$0$0", 1)]
        [DataRow("//[$]\n0$1$0", 1)]
        [DataRow("//[$]\n0$0$1", 1)]
        [DataRow("//[$]\n0$0$1000", 1000)]
        [DataRow("//[$]\n1$0$1000", 1001)]
        [DataRow("//[$]\n0$1$1001", 1)]
        [DataRow("//[$]\n1$1001$1000", 1001)]
        [DataRow("//[$]\n1$2$3", 6)]
        [DataRow("//[$]\n1$2$3$4$5$6$7$8$9$10", 55)]
        [DataRow("//[$$]\n0$$0", 0)]
        [DataRow("//[$$]\n1$$0", 1)]
        [DataRow("//[$$]\n0$$1", 1)]
        [DataRow("//[$$]\n0$$1000", 1000)]
        [DataRow("//[$$]\n1$$1000", 1001)]
        [DataRow("//[$$]\n1$$1001", 1)]
        [DataRow("//[$$]\n1001$$1000", 1000)]
        [DataRow("//[$$]\n1$$2", 3)]
        [DataRow("//[$$]\n0$$0$$0", 0)]
        [DataRow("//[$$]\n1$$0$$0", 1)]
        [DataRow("//[$$]\n0$$1$$0", 1)]
        [DataRow("//[$$]\n0$$0$$1", 1)]
        [DataRow("//[$$]\n0$$0$$1000", 1000)]
        [DataRow("//[$$]\n1$$0$$1000", 1001)]
        [DataRow("//[$$]\n0$$1$$1001", 1)]
        [DataRow("//[$$]\n1$$1001$$1000", 1001)]
        [DataRow("//[$$]\n1$$2$$3", 6)]
        [DataRow("//[$$]\n1$$2$$3$$4$$5$$6$$7$$8$$9$$10", 55)]
        [DataRow("//[sep]\n0sep0", 0)]
        [DataRow("//[sep]\n1sep0", 1)]
        [DataRow("//[sep]\n0sep1", 1)]
        [DataRow("//[sep]\n0sep1000", 1000)]
        [DataRow("//[sep]\n1sep1000", 1001)]
        [DataRow("//[sep]\n1sep1001", 1)]
        [DataRow("//[sep]\n1001sep1000", 1000)]
        [DataRow("//[sep]\n1sep2", 3)]
        [DataRow("//[sep]\n0sep0sep0", 0)]
        [DataRow("//[sep]\n1sep0sep0", 1)]
        [DataRow("//[sep]\n0sep1sep0", 1)]
        [DataRow("//[sep]\n0sep0sep1", 1)]
        [DataRow("//[sep]\n0sep0sep1000", 1000)]
        [DataRow("//[sep]\n1sep0sep1000", 1001)]
        [DataRow("//[sep]\n0sep1sep1001", 1)]
        [DataRow("//[sep]\n1sep1001sep1000", 1001)]
        [DataRow("//[sep]\n1sep2sep3", 6)]
        [DataRow("//[sep]\n1sep2sep3sep4sep5sep6sep7sep8sep9sep10", 55)]
        [DataRow("//[\n]\n0\n0", 0)]
        [DataRow("//[\n]\n1\n0", 1)]
        [DataRow("//[\n]\n0\n1", 1)]
        [DataRow("//[\n]\n0\n1000", 1000)]
        [DataRow("//[\n]\n1\n1000", 1001)]
        [DataRow("//[\n]\n1\n1001", 1)]
        [DataRow("//[\n]\n1001\n1000", 1000)]
        [DataRow("//[\n]\n1\n2", 3)]
        [DataRow("//[\n]\n0\n0\n0", 0)]
        [DataRow("//[\n]\n1\n0\n0", 1)]
        [DataRow("//[\n]\n0\n1\n0", 1)]
        [DataRow("//[\n]\n0\n0\n1", 1)]
        [DataRow("//[\n]\n0\n0\n1000", 1000)]
        [DataRow("//[\n]\n1\n0\n1000", 1001)]
        [DataRow("//[\n]\n0\n1\n1001", 1)]
        [DataRow("//[\n]\n1\n1001\n1000", 1001)]
        [DataRow("//[\n]\n1\n2\n3", 6)]
        [DataRow("//[\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", 55)]
        [DataRow("//[-]\n0-0", 0)]
        [DataRow("//[-]\n1-0", 1)]
        [DataRow("//[-]\n0-1", 1)]
        [DataRow("//[-]\n0-1000", 1000)]
        [DataRow("//[-]\n1-1000", 1001)]
        [DataRow("//[-]\n1-1001", 1)]
        [DataRow("//[-]\n1001-1000", 1000)]
        [DataRow("//[-]\n1-2", 3)]
        [DataRow("//[-]\n0-0-0", 0)]
        [DataRow("//[-]\n1-0-0", 1)]
        [DataRow("//[-]\n0-1-0", 1)]
        [DataRow("//[-]\n0-0-1", 1)]
        [DataRow("//[-]\n0-0-1000", 1000)]
        [DataRow("//[-]\n1-0-1000", 1001)]
        [DataRow("//[-]\n0-1-1001", 1)]
        [DataRow("//[-]\n1-1001-1000", 1001)]
        [DataRow("//[-]\n1-2-3", 6)]
        [DataRow("//[-]\n1-2-3-4-5-6-7-8-9-10", 55)]
        [DataRow("//[-1]\n0-10", 0)]
        [DataRow("//[-1]\n1-10", 1)]
        [DataRow("//[-1]\n0-11", 1)]
        [DataRow("//[-1]\n0-11000", 1000)]
        [DataRow("//[-1]\n1-11000", 1001)]
        [DataRow("//[-1]\n1-11001", 1)]
        [DataRow("//[-1]\n1001-11000", 1000)]
        [DataRow("//[-1]\n1-12", 3)]
        [DataRow("//[-1]\n0-10-10", 0)]
        [DataRow("//[-1]\n1-10-10", 1)]
        [DataRow("//[-1]\n0-11-10", 1)]
        [DataRow("//[-1]\n0-10-11", 1)]
        [DataRow("//[-1]\n0-10-11000", 1000)]
        [DataRow("//[-1]\n1-10-11000", 1001)]
        [DataRow("//[-1]\n0-11-11001", 1)]
        [DataRow("//[-1]\n1-11001-11000", 1001)]
        [DataRow("//[-1]\n1-12-13", 6)]
        [DataRow("//[-1]\n1-12-13-14-15-16-17-18-19-110", 55)]
        [DataRow("//[-1][-2]\n0-10", 0)]
        [DataRow("//[-1][-2]\n1-10", 1)]
        [DataRow("//[-1][-2]\n0-11", 1)]
        [DataRow("//[-1][-2]\n0-11000", 1000)]
        [DataRow("//[-1][-2]\n1-11000", 1001)]
        [DataRow("//[-1][-2]\n1-11001", 1)]
        [DataRow("//[-1][-2]\n1001-11000", 1000)]
        [DataRow("//[-1][-2]\n1-12", 3)]
        [DataRow("//[-1][-2]\n0-20", 0)]
        [DataRow("//[-1][-2]\n1-20", 1)]
        [DataRow("//[-1][-2]\n0-21", 1)]
        [DataRow("//[-1][-2]\n0-21000", 1000)]
        [DataRow("//[-1][-2]\n1-21000", 1001)]
        [DataRow("//[-1][-2]\n1-21001", 1)]
        [DataRow("//[-1][-2]\n1001-21000", 1000)]
        [DataRow("//[-1][-2]\n1-22", 3)]
        [DataRow("//[-1][-2]\n0-10-20", 0)]
        [DataRow("//[-1][-2]\n1-10-20", 1)]
        [DataRow("//[-1][-2]\n0-11-20", 1)]
        [DataRow("//[-1][-2]\n0-10-21", 1)]
        [DataRow("//[-1][-2]\n0-10-21000", 1000)]
        [DataRow("//[-1][-2]\n1-10-21000", 1001)]
        [DataRow("//[-1][-2]\n0-11-21001", 1)]
        [DataRow("//[-1][-2]\n1-11001-21000", 1001)]
        [DataRow("//[-1][-2]\n1-12-23", 6)]
        [DataRow("//[-1][-2]\n1-12-23-14-25-16-27-18-29-110", 55)]
        [DataRow("//[*][%]\n0*0", 0)]
        [DataRow("//[*][%]\n1*0", 1)]
        [DataRow("//[*][%]\n0*1", 1)]
        [DataRow("//[*][%]\n0*1000", 1000)]
        [DataRow("//[*][%]\n1*1000", 1001)]
        [DataRow("//[*][%]\n1*1001", 1)]
        [DataRow("//[*][%]\n1001*1000", 1000)]
        [DataRow("//[*][%]\n1*2", 3)]
        [DataRow("//[*][%]\n0%0", 0)]
        [DataRow("//[*][%]\n1%0", 1)]
        [DataRow("//[*][%]\n0%1", 1)]
        [DataRow("//[*][%]\n0%1000", 1000)]
        [DataRow("//[*][%]\n1%1000", 1001)]
        [DataRow("//[*][%]\n1%1001", 1)]
        [DataRow("//[*][%]\n1001%1000", 1000)]
        [DataRow("//[*][%]\n1%2", 3)]
        [DataRow("//[*][%]\n0*0%0", 0)]
        [DataRow("//[*][%]\n1*0%0", 1)]
        [DataRow("//[*][%]\n0*1%0", 1)]
        [DataRow("//[*][%]\n0*0%1", 1)]
        [DataRow("//[*][%]\n0*0%1000", 1000)]
        [DataRow("//[*][%]\n1*0%1000", 1001)]
        [DataRow("//[*][%]\n0*1%1001", 1)]
        [DataRow("//[*][%]\n1*1001%1000", 1001)]
        [DataRow("//[*][%]\n1*2%3", 6)]
        [DataRow("//[*][%]\n1*2%3*4%5*6%7*8%9*10", 55)]
        [DataRow("//[**][%%]\n0**0", 0)]
        [DataRow("//[**][%%]\n1**0", 1)]
        [DataRow("//[**][%%]\n0**1", 1)]
        [DataRow("//[**][%%]\n0**1000", 1000)]
        [DataRow("//[**][%%]\n1**1000", 1001)]
        [DataRow("//[**][%%]\n1**1001", 1)]
        [DataRow("//[**][%%]\n1001**1000", 1000)]
        [DataRow("//[**][%%]\n1**2", 3)]
        [DataRow("//[**][%%]\n0%%0", 0)]
        [DataRow("//[**][%%]\n1%%0", 1)]
        [DataRow("//[**][%%]\n0%%1", 1)]
        [DataRow("//[**][%%]\n0%%1000", 1000)]
        [DataRow("//[**][%%]\n1%%1000", 1001)]
        [DataRow("//[**][%%]\n1%%1001", 1)]
        [DataRow("//[**][%%]\n1001%%1000", 1000)]
        [DataRow("//[**][%%]\n1%%2", 3)]
        [DataRow("//[**][%%]\n0**0%%0", 0)]
        [DataRow("//[**][%%]\n1**0%%0", 1)]
        [DataRow("//[**][%%]\n0**1%%0", 1)]
        [DataRow("//[**][%%]\n0**0%%1", 1)]
        [DataRow("//[**][%%]\n0**0%%1000", 1000)]
        [DataRow("//[**][%%]\n1**0%%1000", 1001)]
        [DataRow("//[**][%%]\n0**1%%1001", 1)]
        [DataRow("//[**][%%]\n1**1001%%1000", 1001)]
        [DataRow("//[**][%%]\n1**2%%3", 6)]
        [DataRow("//[**][%%]\n1**2%%3**4%%5**6%%7**8%%9**10", 55)]
        [DataRow("//[sep1][sep2]\n0sep10", 0)]
        [DataRow("//[sep1][sep2]\n1sep10", 1)]
        [DataRow("//[sep1][sep2]\n0sep11", 1)]
        [DataRow("//[sep1][sep2]\n0sep11000", 1000)]
        [DataRow("//[sep1][sep2]\n1sep11000", 1001)]
        [DataRow("//[sep1][sep2]\n1sep11001", 1)]
        [DataRow("//[sep1][sep2]\n1001sep11000", 1000)]
        [DataRow("//[sep1][sep2]\n1sep12", 3)]
        [DataRow("//[sep1][sep2]\n0sep20", 0)]
        [DataRow("//[sep1][sep2]\n1sep20", 1)]
        [DataRow("//[sep1][sep2]\n0sep21", 1)]
        [DataRow("//[sep1][sep2]\n0sep21000", 1000)]
        [DataRow("//[sep1][sep2]\n1sep21000", 1001)]
        [DataRow("//[sep1][sep2]\n1sep21001", 1)]
        [DataRow("//[sep1][sep2]\n1001sep21000", 1000)]
        [DataRow("//[sep1][sep2]\n1sep22", 3)]
        [DataRow("//[sep1][sep2]\n0sep10sep20", 0)]
        [DataRow("//[sep1][sep2]\n1sep10sep20", 1)]
        [DataRow("//[sep1][sep2]\n0sep11sep20", 1)]
        [DataRow("//[sep1][sep2]\n0sep10sep21", 1)]
        [DataRow("//[sep1][sep2]\n0sep10sep21000", 1000)]
        [DataRow("//[sep1][sep2]\n1sep10sep21000", 1001)]
        [DataRow("//[sep1][sep2]\n0sep11sep21001", 1)]
        [DataRow("//[sep1][sep2]\n1sep11001sep21000", 1001)]
        [DataRow("//[sep1][sep2]\n1sep12sep23", 6)]
        [DataRow("//[sep1][sep2]\n1sep12sep23sep14sep25sep16sep27sep18sep29sep110", 55)]
        [DataRow("//[[][]]\n0[0", 0)]
        [DataRow("//[[][]]\n1[0", 1)]
        [DataRow("//[[][]]\n0[1", 1)]
        [DataRow("//[[][]]\n0[1000", 1000)]
        [DataRow("//[[][]]\n1[1000", 1001)]
        [DataRow("//[[][]]\n1[1001", 1)]
        [DataRow("//[[][]]\n1001[1000", 1000)]
        [DataRow("//[[][]]\n1[2", 3)]
        [DataRow("//[[][]]\n0]0", 0)]
        [DataRow("//[[][]]\n1]0", 1)]
        [DataRow("//[[][]]\n0]1", 1)]
        [DataRow("//[[][]]\n0]1000", 1000)]
        [DataRow("//[[][]]\n1]1000", 1001)]
        [DataRow("//[[][]]\n1]1001", 1)]
        [DataRow("//[[][]]\n1001]1000", 1000)]
        [DataRow("//[[][]]\n1]2", 3)]
        [DataRow("//[[][]]\n0[0]0", 0)]
        [DataRow("//[[][]]\n1[0]0", 1)]
        [DataRow("//[[][]]\n0[1]0", 1)]
        [DataRow("//[[][]]\n0[0]1", 1)]
        [DataRow("//[[][]]\n0[0]1000", 1000)]
        [DataRow("//[[][]]\n1[0]1000", 1001)]
        [DataRow("//[[][]]\n0[1]1001", 1)]
        [DataRow("//[[][]]\n1[1001]1000", 1001)]
        [DataRow("//[[][]]\n1[2]3", 6)]
        [DataRow("//[[][]]\n1[2]3[4]5[6]7[8]9[10", 55)]
        [DataRow("//[+][!][#]\n0+0", 0)]
        [DataRow("//[+][!][#]\n1+0", 1)]
        [DataRow("//[+][!][#]\n0+1", 1)]
        [DataRow("//[+][!][#]\n0+1000", 1000)]
        [DataRow("//[+][!][#]\n1+1000", 1001)]
        [DataRow("//[+][!][#]\n1+1001", 1)]
        [DataRow("//[+][!][#]\n1001+1000", 1000)]
        [DataRow("//[+][!][#]\n1+2", 3)]
        [DataRow("//[+][!][#]\n0!0", 0)]
        [DataRow("//[+][!][#]\n1!0", 1)]
        [DataRow("//[+][!][#]\n0!1", 1)]
        [DataRow("//[+][!][#]\n0!1000", 1000)]
        [DataRow("//[+][!][#]\n1!1000", 1001)]
        [DataRow("//[+][!][#]\n1!1001", 1)]
        [DataRow("//[+][!][#]\n1001!1000", 1000)]
        [DataRow("//[+][!][#]\n1!2", 3)]
        [DataRow("//[+][!][#]\n0#0", 0)]
        [DataRow("//[+][!][#]\n1#0", 1)]
        [DataRow("//[+][!][#]\n0#1", 1)]
        [DataRow("//[+][!][#]\n0#1000", 1000)]
        [DataRow("//[+][!][#]\n1#1000", 1001)]
        [DataRow("//[+][!][#]\n1#1001", 1)]
        [DataRow("//[+][!][#]\n1001#1000", 1000)]
        [DataRow("//[+][!][#]\n1#2", 3)]
        [DataRow("//[+][!][#]\n0+0!0#0", 0)]
        [DataRow("//[+][!][#]\n1+0!0#0", 1)]
        [DataRow("//[+][!][#]\n0+1!0#0", 1)]
        [DataRow("//[+][!][#]\n0+0!1#0", 1)]
        [DataRow("//[+][!][#]\n0+0!0#1", 1)]
        [DataRow("//[+][!][#]\n0+0!1000#0", 1000)]
        [DataRow("//[+][!][#]\n1+0!1000#0", 1001)]
        [DataRow("//[+][!][#]\n0+1!1001#0", 1)]
        [DataRow("//[+][!][#]\n1+1001!1000#0", 1001)]
        [DataRow("//[+][!][#]\n1+2!3#4", 10)]
        [DataRow("//[+][!][#]\n1+2!3#4+5!6#7+8!9#10", 55)]
        [DataRow("//[++][!!][##]\n0++0", 0)]
        [DataRow("//[++][!!][##]\n1++0", 1)]
        [DataRow("//[++][!!][##]\n0++1", 1)]
        [DataRow("//[++][!!][##]\n0++1000", 1000)]
        [DataRow("//[++][!!][##]\n1++1000", 1001)]
        [DataRow("//[++][!!][##]\n1++1001", 1)]
        [DataRow("//[++][!!][##]\n1001++1000", 1000)]
        [DataRow("//[++][!!][##]\n1++2", 3)]
        [DataRow("//[++][!!][##]\n0!!0", 0)]
        [DataRow("//[++][!!][##]\n1!!0", 1)]
        [DataRow("//[++][!!][##]\n0!!1", 1)]
        [DataRow("//[++][!!][##]\n0!!1000", 1000)]
        [DataRow("//[++][!!][##]\n1!!1000", 1001)]
        [DataRow("//[++][!!][##]\n1!!1001", 1)]
        [DataRow("//[++][!!][##]\n1001!!1000", 1000)]
        [DataRow("//[++][!!][##]\n1!!2", 3)]
        [DataRow("//[++][!!][##]\n0##0", 0)]
        [DataRow("//[++][!!][##]\n1##0", 1)]
        [DataRow("//[++][!!][##]\n0##1", 1)]
        [DataRow("//[++][!!][##]\n0##1000", 1000)]
        [DataRow("//[++][!!][##]\n1##1000", 1001)]
        [DataRow("//[++][!!][##]\n1##1001", 1)]
        [DataRow("//[++][!!][##]\n1001##1000", 1000)]
        [DataRow("//[++][!!][##]\n1##2", 3)]
        [DataRow("//[++][!!][##]\n0++0!!0##0", 0)]
        [DataRow("//[++][!!][##]\n1++0!!0##0", 1)]
        [DataRow("//[++][!!][##]\n0++1!!0##0", 1)]
        [DataRow("//[++][!!][##]\n0++0!!1##0", 1)]
        [DataRow("//[++][!!][##]\n0++0!!0##1", 1)]
        [DataRow("//[++][!!][##]\n0++0!!1000##0", 1000)]
        [DataRow("//[++][!!][##]\n1++0!!1000##0", 1001)]
        [DataRow("//[++][!!][##]\n0++1!!1001##0", 1)]
        [DataRow("//[++][!!][##]\n1++1001!!1000##0", 1001)]
        [DataRow("//[++][!!][##]\n1++2!!3##4", 10)]
        [DataRow("//[++][!!][##]\n1++2!!3##4++5!!6##7++8!!9##10", 55)]
        [DataRow("//[-1][-2][-3]\n0-10", 0)]
        [DataRow("//[-1][-2][-3]\n1-10", 1)]
        [DataRow("//[-1][-2][-3]\n0-11", 1)]
        [DataRow("//[-1][-2][-3]\n0-11000", 1000)]
        [DataRow("//[-1][-2][-3]\n1-11000", 1001)]
        [DataRow("//[-1][-2][-3]\n1-11001", 1)]
        [DataRow("//[-1][-2][-3]\n1001-11000", 1000)]
        [DataRow("//[-1][-2][-3]\n1-12", 3)]
        [DataRow("//[-1][-2][-3]\n0-20", 0)]
        [DataRow("//[-1][-2][-3]\n1-20", 1)]
        [DataRow("//[-1][-2][-3]\n0-21", 1)]
        [DataRow("//[-1][-2][-3]\n0-21000", 1000)]
        [DataRow("//[-1][-2][-3]\n1-21000", 1001)]
        [DataRow("//[-1][-2][-3]\n1-21001", 1)]
        [DataRow("//[-1][-2][-3]\n1001-21000", 1000)]
        [DataRow("//[-1][-2][-3]\n1-22", 3)]
        [DataRow("//[-1][-2][-3]\n0-30", 0)]
        [DataRow("//[-1][-2][-3]\n1-30", 1)]
        [DataRow("//[-1][-2][-3]\n0-31", 1)]
        [DataRow("//[-1][-2][-3]\n0-31000", 1000)]
        [DataRow("//[-1][-2][-3]\n1-31000", 1001)]
        [DataRow("//[-1][-2][-3]\n1-31001", 1)]
        [DataRow("//[-1][-2][-3]\n1001-31000", 1000)]
        [DataRow("//[-1][-2][-3]\n1-32", 3)]
        [DataRow("//[-1][-2][-3]\n0-10-20-30", 0)]
        [DataRow("//[-1][-2][-3]\n1-10-20-30", 1)]
        [DataRow("//[-1][-2][-3]\n0-11-20-30", 1)]
        [DataRow("//[-1][-2][-3]\n0-10-21-30", 1)]
        [DataRow("//[-1][-2][-3]\n0-10-20-31", 1)]
        [DataRow("//[-1][-2][-3]\n0-10-21000-30", 1000)]
        [DataRow("//[-1][-2][-3]\n1-10-21000-30", 1001)]
        [DataRow("//[-1][-2][-3]\n0-11-21001-30", 1)]
        [DataRow("//[-1][-2][-3]\n1-11001-21000-30", 1001)]
        [DataRow("//[-1][-2][-3]\n1-12-23-34", 10)]
        [DataRow("//[-1][-2][-3]\n1-12-23-34-15-26-37-18-29-310", 55)]
        [DataRow("//[sep1][sep2][sep3]\n0sep10", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep10", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep11", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep11000", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1sep11000", 1001)]
        [DataRow("//[sep1][sep2][sep3]\n1sep11001", 1)]
        [DataRow("//[sep1][sep2][sep3]\n1001sep11000", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1sep12", 3)]
        [DataRow("//[sep1][sep2][sep3]\n0sep20", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep20", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep21", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep21000", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1sep21000", 1001)]
        [DataRow("//[sep1][sep2][sep3]\n1sep21001", 1)]
        [DataRow("//[sep1][sep2][sep3]\n1001sep21000", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1sep22", 3)]
        [DataRow("//[sep1][sep2][sep3]\n0sep30", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep30", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep31", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep31000", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1sep31000", 1001)]
        [DataRow("//[sep1][sep2][sep3]\n1sep31001", 1)]
        [DataRow("//[sep1][sep2][sep3]\n1001sep31000", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1sep32", 3)]
        [DataRow("//[sep1][sep2][sep3]\n0sep10sep20sep30", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep10sep20sep30", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep11sep20sep30", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep10sep21sep30", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep10sep20sep31", 1)]
        [DataRow("//[sep1][sep2][sep3]\n0sep10sep21000sep30", 1000)]
        [DataRow("//[sep1][sep2][sep3]\n1sep10sep21000sep30", 1001)]
        [DataRow("//[sep1][sep2][sep3]\n0sep11sep21001sep30", 1)]
        [DataRow("//[sep1][sep2][sep3]\n1sep11001sep21000sep30", 1001)]
        [DataRow("//[sep1][sep2][sep3]\n1sep12sep23sep34", 10)]
        [DataRow("//[sep1][sep2][sep3]\n1sep12sep23sep34sep15sep26sep37sep18sep29sep310", 55)]
        [DataRow("//[?][??][???]\n0?0", 0)]
        [DataRow("//[?][??][???]\n1?0", 1)]
        [DataRow("//[?][??][???]\n0?1", 1)]
        [DataRow("//[?][??][???]\n0?1000", 1000)]
        [DataRow("//[?][??][???]\n1?1000", 1001)]
        [DataRow("//[?][??][???]\n1?1001", 1)]
        [DataRow("//[?][??][???]\n1001?1000", 1000)]
        [DataRow("//[?][??][???]\n1?2", 3)]
        [DataRow("//[?][??][???]\n0??0", 0)]
        [DataRow("//[?][??][???]\n1??0", 1)]
        [DataRow("//[?][??][???]\n0??1", 1)]
        [DataRow("//[?][??][???]\n0??1000", 1000)]
        [DataRow("//[?][??][???]\n1??1000", 1001)]
        [DataRow("//[?][??][???]\n1??1001", 1)]
        [DataRow("//[?][??][???]\n1001??1000", 1000)]
        [DataRow("//[?][??][???]\n1??2", 3)]
        [DataRow("//[?][??][???]\n0???0", 0)]
        [DataRow("//[?][??][???]\n1???0", 1)]
        [DataRow("//[?][??][???]\n0???1", 1)]
        [DataRow("//[?][??][???]\n0???1000", 1000)]
        [DataRow("//[?][??][???]\n1???1000", 1001)]
        [DataRow("//[?][??][???]\n1???1001", 1)]
        [DataRow("//[?][??][???]\n1001???1000", 1000)]
        [DataRow("//[?][??][???]\n1???2", 3)]
        [DataRow("//[?][??][???]\n0?0??0???0", 0)]
        [DataRow("//[?][??][???]\n1?0??0???0", 1)]
        [DataRow("//[?][??][???]\n0?1??0???0", 1)]
        [DataRow("//[?][??][???]\n0?0??1???0", 1)]
        [DataRow("//[?][??][???]\n0?0??0???1", 1)]
        [DataRow("//[?][??][???]\n0?0??1000???0", 1000)]
        [DataRow("//[?][??][???]\n1?0??1000???0", 1001)]
        [DataRow("//[?][??][???]\n0?1??1001???0", 1)]
        [DataRow("//[?][??][???]\n1?1001??1000???0", 1001)]
        [DataRow("//[?][??][???]\n1?2??3???4", 10)]
        [DataRow("//[?][??][???]\n1?2??3???4?5??6???7?8??9???10", 55)]
        public void Test_Add_Should_ReturnSum_When_CalledWithTwoOrMoreIntegers(string input, int expectedResult)
        {
            // Act.
            var actualResult = this.Act_Add(input);

            // Assert.
            Assert.AreEqual(expectedResult, actualResult);
        }

        /// <summary>
        /// The Add method should throw an exception when called with an input ending with a separator.
        /// </summary>
        /// <param name="input">The test case input.</param>
        [TestMethod]
        [DataRow("1;")]
        [DataRow("1;2;")]
        [DataRow("1\n")]
        [DataRow("1\n2\n")]
        [DataRow("1;2\n")]
        [DataRow("1\n2;")]
        [DataRow("//$\n1$")]
        [DataRow("//$\n1$2$")]
        [DataRow("//$$\n1$$")]
        [DataRow("//$$\n1$$2$$")]
        [DataRow("//sep\n1sep")]
        [DataRow("//sep\n1sep2sep")]
        [DataRow("//\n\n1\n")]
        [DataRow("//\n\n1\n2\n")]
        [DataRow("//-\n1-")]
        [DataRow("//-\n1-2-")]
        [DataRow("//-1\n1-1")]
        [DataRow("//-1\n1-12-1")]
        [DataRow("//[$]\n1$")]
        [DataRow("//[$]\n1$2$")]
        [DataRow("//[$$]\n1$$")]
        [DataRow("//[$$]\n1$$2$$")]
        [DataRow("//[sep]\n1sep")]
        [DataRow("//[sep]\n1sep2sep")]
        [DataRow("//[\n]\n1\n")]
        [DataRow("//[\n]\n1\n2\n")]
        [DataRow("//[-]\n1-")]
        [DataRow("//[-]\n1-2-")]
        [DataRow("//[-1]\n1-1")]
        [DataRow("//[-1]\n1-12-1")]
        [DataRow("//[-1][-2]\n1-1")]
        [DataRow("//[-1][-2]\n1-2")]
        [DataRow("//[-1][-2]\n1-12-2")]
        [DataRow("//[-1][-2]\n1-22-1")]
        [DataRow("//[*][%]\n1*")]
        [DataRow("//[*][%]\n1%")]
        [DataRow("//[*][%]\n1*2%")]
        [DataRow("//[*][%]\n1%2*")]
        [DataRow("//[**][%%]\n1**")]
        [DataRow("//[**][%%]\n1%%")]
        [DataRow("//[**][%%]\n1**2%%")]
        [DataRow("//[**][%%]\n1%%2**")]
        [DataRow("//[sep1][sep2]\n1sep1")]
        [DataRow("//[sep1][sep2]\n1sep2")]
        [DataRow("//[sep1][sep2]\n1sep12sep2")]
        [DataRow("//[sep1][sep2]\n1sep22sep1")]
        [DataRow("//[[][]]\n1[")]
        [DataRow("//[[][]]\n1]")]
        [DataRow("//[[][]]\n1[2]")]
        [DataRow("//[[][]]\n1]2[")]
        [DataRow("//[+][!][#]\n1+")]
        [DataRow("//[+][!][#]\n1!")]
        [DataRow("//[+][!][#]\n1#")]
        [DataRow("//[+][!][#]\n1+2!3#")]
        [DataRow("//[++][!!][##]\n1++")]
        [DataRow("//[++][!!][##]\n1!!")]
        [DataRow("//[++][!!][##]\n1##")]
        [DataRow("//[++][!!][##]\n1++2!!3##")]
        [DataRow("//[-1][-2][-3]\n1-1")]
        [DataRow("//[-1][-2][-3]\n1-2")]
        [DataRow("//[-1][-2][-3]\n1-3")]
        [DataRow("//[-1][-2][-3]\n1-12-23-3")]
        [DataRow("//[sep1][sep2][sep3]\n1sep1")]
        [DataRow("//[sep1][sep2][sep3]\n1sep2")]
        [DataRow("//[sep1][sep2][sep3]\n1sep3")]
        [DataRow("//[sep1][sep2][sep3]\n1sep12sep23sep3")]
        [DataRow("//[?][??][???]\n1?")]
        [DataRow("//[?][??][???]\n1??")]
        [DataRow("//[?][??][???]\n1???")]
        [DataRow("//[?][??][???]\n1?2??3???")]
        public void Test_Add_Should_ThrowException_When_CalledWithInputEndingWithSeparator(string input)
        {
            // Arrange.
            var errorMessage = $"Number expected but EOF found.";

            // Act.
            var exception = Assert.ThrowsException<Exception>(() => this.Act_Add(input));

            // Assert.
            Assert.AreEqual(errorMessage, exception.Message);
        }

        /// <summary>
        /// The Add method should throw an exception when called with an input containing at least one negative number.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <param name="negativesFound">Expected negative numbers in the input.</param>
        [TestMethod]
        [DataRow("-1", "-1")]
        [DataRow("-1;2", "-1")]
        [DataRow("1;-2", "-2")]
        [DataRow("-1;-1", "-1, -1")]
        [DataRow("-1\n2", "-1")]
        [DataRow("1\n-2", "-2")]
        [DataRow("-1\n-1", "-1, -1")]
        [DataRow("-1\n-2;-1", "-1, -2, -1")]
        [DataRow("//$\n-1", "-1")]
        [DataRow("//$\n-1$2", "-1")]
        [DataRow("//$\n1$-2", "-2")]
        [DataRow("//$\n-1$-1", "-1, -1")]
        [DataRow("//$$\n-1", "-1")]
        [DataRow("//$$\n-1$$2", "-1")]
        [DataRow("//$$\n1$$-2", "-2")]
        [DataRow("//$$\n-1$$-1", "-1, -1")]
        [DataRow("//sep\n-1", "-1")]
        [DataRow("//sep\n-1sep2", "-1")]
        [DataRow("//sep\n1sep-2", "-2")]
        [DataRow("//sep\n-1sep-1", "-1, -1")]
        [DataRow("//\n\n-1", "-1")]
        [DataRow("//\n\n-1\n2", "-1")]
        [DataRow("//\n\n1\n-2", "-2")]
        [DataRow("//\n\n-1\n-1", "-1, -1")]
        [DataRow("//-1\n-2", "-2")]
        [DataRow("//-1\n-2-13", "-2")]
        [DataRow("//-1\n2-1-3", "-3")]
        [DataRow("//-1\n-2-1-2", "-2, -2")]
        [DataRow("//[$]\n-1", "-1")]
        [DataRow("//[$]\n-1$2", "-1")]
        [DataRow("//[$]\n1$-2", "-2")]
        [DataRow("//[$]\n-1$-1", "-1, -1")]
        [DataRow("//[$$]\n-1", "-1")]
        [DataRow("//[$$]\n-1$$2", "-1")]
        [DataRow("//[$$]\n1$$-2", "-2")]
        [DataRow("//[$$]\n-1$$-1", "-1, -1")]
        [DataRow("//[sep]\n-1", "-1")]
        [DataRow("//[sep]\n-1sep2", "-1")]
        [DataRow("//[sep]\n1sep-2", "-2")]
        [DataRow("//[sep]\n-1sep-1", "-1, -1")]
        [DataRow("//[\n]\n-1", "-1")]
        [DataRow("//[\n]\n-1\n2", "-1")]
        [DataRow("//[\n]\n1\n-2", "-2")]
        [DataRow("//[\n]\n-1\n-1", "-1, -1")]
        [DataRow("//[-1]\n-2", "-2")]
        [DataRow("//[-1]\n-2-13", "-2")]
        [DataRow("//[-1]\n2-1-3", "-3")]
        [DataRow("//[-1]\n-2-1-3", "-2, -3")]
        [DataRow("//[-1][-2]\n-3", "-3")]
        [DataRow("//[-1][-2]\n-3-14", "-3")]
        [DataRow("//[-1][-2]\n-3-24", "-3")]
        [DataRow("//[-1][-2]\n3-1-4", "-4")]
        [DataRow("//[-1][-2]\n3-2-4", "-4")]
        [DataRow("//[-1][-2]\n-3-1-4", "-3, -4")]
        [DataRow("//[-1][-2]\n-3-2-4", "-3, -4")]
        [DataRow("//[-1][-2]\n-3-1-4-2-3", "-3, -4, -3")]
        [DataRow("//[*][%]\n-1", "-1")]
        [DataRow("//[*][%]\n-1*2", "-1")]
        [DataRow("//[*][%]\n-1%2", "-1")]
        [DataRow("//[*][%]\n1*-2", "-2")]
        [DataRow("//[*][%]\n1%-2", "-2")]
        [DataRow("//[*][%]\n-1*-2", "-1, -2")]
        [DataRow("//[*][%]\n-1%-2", "-1, -2")]
        [DataRow("//[*][%]\n-1*-2%-1", "-1, -2, -1")]
        [DataRow("//[**][%%]\n-1", "-1")]
        [DataRow("//[**][%%]\n-1**2", "-1")]
        [DataRow("//[**][%%]\n-1%%2", "-1")]
        [DataRow("//[**][%%]\n1**-2", "-2")]
        [DataRow("//[**][%%]\n1%%-2", "-2")]
        [DataRow("//[**][%%]\n-1**-2", "-1, -2")]
        [DataRow("//[**][%%]\n-1%%-2", "-1, -2")]
        [DataRow("//[**][%%]\n-1**-2%%-1", "-1, -2, -1")]
        [DataRow("//[sep1][sep2]\n-1", "-1")]
        [DataRow("//[sep1][sep2]\n-1sep12", "-1")]
        [DataRow("//[sep1][sep2]\n-1sep22", "-1")]
        [DataRow("//[sep1][sep2]\n1sep1-2", "-2")]
        [DataRow("//[sep1][sep2]\n1sep2-2", "-2")]
        [DataRow("//[sep1][sep2]\n-1sep1-2", "-1, -2")]
        [DataRow("//[sep1][sep2]\n-1sep2-2", "-1, -2")]
        [DataRow("//[sep1][sep2]\n-1sep1-2sep2-1", "-1, -2, -1")]
        [DataRow("//[[][]]]\n-1", "-1")]
        [DataRow("//[[][]]\n-1[2", "-1")]
        [DataRow("//[[][]]\n-1]2", "-1")]
        [DataRow("//[[][]]\n1[-2", "-2")]
        [DataRow("//[[][]]\n1]-2", "-2")]
        [DataRow("//[[][]]\n-1[-2", "-1, -2")]
        [DataRow("//[[][]]\n-1]-2", "-1, -2")]
        [DataRow("//[[][]]\n-1[-2]-1", "-1, -2, -1")]
        [DataRow("//[+][!][#]\n-1", "-1")]
        [DataRow("//[+][!][#]\n-1+2", "-1")]
        [DataRow("//[+][!][#]\n-1!2", "-1")]
        [DataRow("//[+][!][#]\n-1#2", "-1")]
        [DataRow("//[+][!][#]\n-1+-2!3", "-1, -2")]
        [DataRow("//[+][!][#]\n-1!-2#3", "-1, -2")]
        [DataRow("//[+][!][#]\n-1#-2+3", "-1, -2")]
        [DataRow("//[+][!][#]\n-1+-2!-3#-1", "-1, -2, -3, -1")]
        [DataRow("//[++][!!][##]\n-1", "-1")]
        [DataRow("//[++][!!][##]\n-1++2", "-1")]
        [DataRow("//[++][!!][##]\n-1!!2", "-1")]
        [DataRow("//[++][!!][##]\n-1##2", "-1")]
        [DataRow("//[++][!!][##]\n-1++-2!!3", "-1, -2")]
        [DataRow("//[++][!!][##]\n-1!!-2##3", "-1, -2")]
        [DataRow("//[++][!!][##]\n-1##-2++3", "-1, -2")]
        [DataRow("//[++][!!][##]\n-1++-2!!-3##-1", "-1, -2, -3, -1")]
        [DataRow("//[-1][-2][-3]\n-4", "-4")]
        [DataRow("//[-1][-2][-3]\n-4-15", "-4")]
        [DataRow("//[-1][-2][-3]\n-4-25", "-4")]
        [DataRow("//[-1][-2][-3]\n-4-35", "-4")]
        [DataRow("//[-1][-2][-3]\n-4-1-5-26", "-4, -5")]
        [DataRow("//[-1][-2][-3]\n-4-2-5-36", "-4, -5")]
        [DataRow("//[-1][-2][-3]\n-4-1-5-36", "-4, -5")]
        [DataRow("//[-1][-2][-3]\n-4-1-5-2-6-3-4", "-4, -5, -6, -4")]
        [DataRow("//[sep1][sep2][sep3]\n-1", "-1")]
        [DataRow("//[sep1][sep2][sep3]\n-1sep12", "-1")]
        [DataRow("//[sep1][sep2][sep3]\n-1sep22", "-1")]
        [DataRow("//[sep1][sep2][sep3]\n-1sep32", "-1")]
        [DataRow("//[sep1][sep2][sep3]\n-1sep1-2sep23", "-1, -2")]
        [DataRow("//[sep1][sep2][sep3]\n-1sep2-2sep33", "-1, -2")]
        [DataRow("//[sep1][sep2][sep3]\n-1sep1-2sep33", "-1, -2")]
        [DataRow("//[sep1][sep2][sep3]\n-1sep1-2sep2-3sep3-1", "-1, -2, -3, -1")]
        [DataRow("//[?][??][???]\n-1", "-1")]
        [DataRow("//[?][??][???]\n-1?2", "-1")]
        [DataRow("//[?][??][???]\n-1??2", "-1")]
        [DataRow("//[?][??][???]\n-1???2", "-1")]
        [DataRow("//[?][??][???]\n-1?-2??3", "-1, -2")]
        [DataRow("//[?][??][???]\n-1??-2???3", "-1, -2")]
        [DataRow("//[?][??][???]\n-1?-2???3", "-1, -2")]
        [DataRow("//[?][??][???]\n-1?-2??-3???-1", "-1, -2, -3, -1")]
        public void Test_Add_Should_ThrowException_When_CalledWithInputContainingNegativeNumber(string input, string negativesFound)
        {
            // Arrange.
            var errorMessage = $"Negatives not allowed : {negativesFound}";

            // Act.
            var exception = Assert.ThrowsException<Exception>(() => this.Act_Add(input));

            // Assert.
            Assert.AreEqual(errorMessage, exception.Message);
        }

        /// <summary>
        /// The Add method should throw an exception when called with an input containing an unspecified separator.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <param name="supportedSeparators">Expected specified separators in the input.</param>
        /// <param name="unsupportedSeparator">Expected unspecified separator in the input.</param>
        /// <param name="position">Expected position of the unspecified separator.</param>
        [TestMethod]
        [DataRow("1$2", ";' or '\n", "$", 1)]
        [DataRow("//$\n1;2", "$", ";", 1)]
        [DataRow("//$$\n1;2", "$$", ";", 1)]
        [DataRow("//sep\n1|2", "sep", "|", 1)]
        [DataRow("//\n\n1|2", "\n", "|", 1)]
        [DataRow("//-\n1|2", "-", "|", 1)]
        [DataRow("//-1\n1|2", "-1", "|", 1)]
        [DataRow("//[$]\n1;2", "$", ";", 1)]
        [DataRow("//[$$]\n1;2", "$$", ";", 1)]
        [DataRow("//[sep]\n1|2", "sep", "|", 1)]
        [DataRow("//[\n]\n1|2", "\n", "|", 1)]
        [DataRow("//[-]\n1|2", "-", "|", 1)]
        [DataRow("//[-1]\n1|2", "-1", "|", 1)]
        [DataRow("//[-1][-2]\n1|2", "-1' or '-2", "|", 1)]
        [DataRow("//[*][%]\n1=2", "*' or '%", "=", 1)]
        [DataRow("//[**][%%]\n1=2", "**' or '%%", "=", 1)]
        [DataRow("//[sep1][sep2]\n1del2", "sep1' or 'sep2", "del", 1)]
        [DataRow("//[[][]]\n1{2", "[' or ']", "{", 1)]
        [DataRow("//[+][!][#]\n1=2", "+' or '!' or '#", "=", 1)]
        [DataRow("//[++][!!][##]\n1=2", "++' or '!!' or '##", "=", 1)]
        [DataRow("//[-1][-2][-3]\n1=2", "-1' or '-2' or '-3", "=", 1)]
        [DataRow("//[sep1][sep2][sep3]\n1=2", "sep1' or 'sep2' or 'sep3", "=", 1)]
        [DataRow("//[?][??][???]\n1=2", "???' or '??' or '?", "=", 1)]
        public void Test_Add_Should_ThrowException_When_CalledWithInputContainsUnsupportedSeparator(string input, string supportedSeparators, string unsupportedSeparator, int position)
        {
            // Arrange.
            var errorMessage = $"'{supportedSeparators}' expected but '{unsupportedSeparator}' found at position {position}.";

            // Act.
            var exception = Assert.ThrowsException<Exception>(() => this.Act_Add(input));

            // Assert.
            Assert.AreEqual(errorMessage, exception.Message);
        }

        /// <summary>
        /// The Add method should throw an exception when called with an input starting with a separator or containing multiple separators following each other.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <param name="unexpectedSeparator">Expected unexpected separator in the input.</param>
        /// <param name="position">Expected position of the unexpected separator.</param>
        [TestMethod]
        [DataRow(";1;2", ";", 0)]
        [DataRow("1;;2", ";", 2)]
        [DataRow("\n1\n2", "\n", 0)]
        [DataRow("1\n\n2", "\n", 2)]
        [DataRow(";1\n2", ";", 0)]
        [DataRow("\n1;2", "\n", 0)]
        [DataRow("1\n;2", ";", 2)]
        [DataRow("1;\n2", "\n", 2)]
        [DataRow("//$\n$1$2", "$", 0)]
        [DataRow("//$\n1$$2", "$", 2)]
        [DataRow("//$$\n$$1$$2", "$$", 0)]
        [DataRow("//$$\n1$$$$2", "$$", 3)]
        [DataRow("//sep\nsep1sep2", "sep", 0)]
        [DataRow("//sep\n1sepsep2", "sep", 4)]
        [DataRow("//\n\n\n1\n2", "\n", 0)]
        [DataRow("//\n\n1\n\n2", "\n", 2)]
        [DataRow("//-\n-1-2", "-", 0)]
        [DataRow("//-\n1--2", "-", 2)]
        [DataRow("//-1\n-11-12", "-1", 0)]
        [DataRow("//-1\n1-1-12", "-1", 3)]
        [DataRow("//[$]\n$1$2", "$", 0)]
        [DataRow("//[$]\n1$$2", "$", 2)]
        [DataRow("//[$$]\n$$1$$2", "$$", 0)]
        [DataRow("//[$$]\n1$$$$2", "$$", 3)]
        [DataRow("//[sep]\nsep1sep2", "sep", 0)]
        [DataRow("//[sep]\n1sepsep2", "sep", 4)]
        [DataRow("//[\n]\n\n1\n2", "\n", 0)]
        [DataRow("//[\n]\n1\n\n2", "\n", 2)]
        [DataRow("//[-]\n-1-2", "-", 0)]
        [DataRow("//[-]\n1--2", "-", 2)]
        [DataRow("//[-1]\n-11-12", "-1", 0)]
        [DataRow("//[-1]\n1-1-12", "-1", 3)]
        [DataRow("//[-1][-2]\n-11-12", "-1", 0)]
        [DataRow("//[-1][-2]\n1-1-12", "-1", 3)]
        [DataRow("//[-1][-2]\n-21-22", "-2", 0)]
        [DataRow("//[-1][-2]\n1-2-22", "-2", 3)]
        [DataRow("//[-1][-2]\n-11-22", "-1", 0)]
        [DataRow("//[-1][-2]\n-21-12", "-2", 0)]
        [DataRow("//[-1][-2]\n1-2-12", "-1", 3)]
        [DataRow("//[-1][-2]\n1-1-22", "-2", 3)]
        [DataRow("//[*][%]\n*1*2", "*", 0)]
        [DataRow("//[*][%]\n1**2", "*", 2)]
        [DataRow("//[*][%]\n%1%2", "%", 0)]
        [DataRow("//[*][%]\n1%%2", "%", 2)]
        [DataRow("//[*][%]\n*1%2", "*", 0)]
        [DataRow("//[*][%]\n%1*2", "%", 0)]
        [DataRow("//[*][%]\n1%*2", "*", 2)]
        [DataRow("//[*][%]\n1*%2", "%", 2)]
        [DataRow("//[**][%%]\n**1**2", "**", 0)]
        [DataRow("//[**][%%]\n1****2", "**", 3)]
        [DataRow("//[**][%%]\n%%1%%2", "%%", 0)]
        [DataRow("//[**][%%]\n1%%%%2", "%%", 3)]
        [DataRow("//[**][%%]\n**1%%2", "**", 0)]
        [DataRow("//[**][%%]\n%%1**2", "%%", 0)]
        [DataRow("//[**][%%]\n1%%**2", "**", 3)]
        [DataRow("//[**][%%]\n1**%%2", "%%", 3)]
        [DataRow("//[sep1][sep2]\nsep11sep12", "sep1", 0)]
        [DataRow("//[sep1][sep2]\n1sep1sep12", "sep1", 5)]
        [DataRow("//[sep1][sep2]\nsep21sep22", "sep2", 0)]
        [DataRow("//[sep1][sep2]\n1sep2sep22", "sep2", 5)]
        [DataRow("//[sep1][sep2]\nsep11sep22", "sep1", 0)]
        [DataRow("//[sep1][sep2]\nsep21sep12", "sep2", 0)]
        [DataRow("//[sep1][sep2]\n1sep2sep12", "sep1", 5)]
        [DataRow("//[sep1][sep2]\n1sep1sep22", "sep2", 5)]
        [DataRow("//[[][]]\n[1[2", "[", 0)]
        [DataRow("//[[][]]\n1[[2", "[", 2)]
        [DataRow("//[[][]]\n]1]2", "]", 0)]
        [DataRow("//[[][]]\n1]]2", "]", 2)]
        [DataRow("//[[][]]\n[1]2", "[", 0)]
        [DataRow("//[[][]]\n]1[2", "]", 0)]
        [DataRow("//[[][]]\n1][2", "[", 2)]
        [DataRow("//[[][]]\n1[]2", "]", 2)]
        [DataRow("//[+][!][#]\n+1+2", "+", 0)]
        [DataRow("//[+][!][#]\n1++2", "+", 2)]
        [DataRow("//[+][!][#]\n!1!2", "!", 0)]
        [DataRow("//[+][!][#]\n1!!2", "!", 2)]
        [DataRow("//[+][!][#]\n#1#2", "#", 0)]
        [DataRow("//[+][!][#]\n1##2", "#", 2)]
        [DataRow("//[+][!][#]\n+1!2", "+", 0)]
        [DataRow("//[+][!][#]\n!1#2", "!", 0)]
        [DataRow("//[+][!][#]\n#1+2", "#", 0)]
        [DataRow("//[+][!][#]\n1+!2", "!", 2)]
        [DataRow("//[+][!][#]\n1!#2", "#", 2)]
        [DataRow("//[+][!][#]\n1#+2", "+", 2)]
        [DataRow("//[++][!!][##]\n++1++2", "++", 0)]
        [DataRow("//[++][!!][##]\n1++++2", "++", 3)]
        [DataRow("//[++][!!][##]\n!!1!!2", "!!", 0)]
        [DataRow("//[++][!!][##]\n1!!!!2", "!!", 3)]
        [DataRow("//[++][!!][##]\n##1##2", "##", 0)]
        [DataRow("//[++][!!][##]\n1####2", "##", 3)]
        [DataRow("//[++][!!][##]\n++1!!2", "++", 0)]
        [DataRow("//[++][!!][##]\n!!1##2", "!!", 0)]
        [DataRow("//[++][!!][##]\n##1++2", "##", 0)]
        [DataRow("//[++][!!][##]\n1++!!2", "!!", 3)]
        [DataRow("//[++][!!][##]\n1!!##2", "##", 3)]
        [DataRow("//[++][!!][##]\n1##++2", "++", 3)]
        [DataRow("//[-1][-2][-3]\n-11-12", "-1", 0)]
        [DataRow("//[-1][-2][-3]\n1-1-12", "-1", 3)]
        [DataRow("//[-1][-2][-3]\n-21-22", "-2", 0)]
        [DataRow("//[-1][-2][-3]\n1-2-22", "-2", 3)]
        [DataRow("//[-1][-2][-3]\n-31-32", "-3", 0)]
        [DataRow("//[-1][-2][-3]\n1-3-32", "-3", 3)]
        [DataRow("//[-1][-2][-3]\n-11-22", "-1", 0)]
        [DataRow("//[-1][-2][-3]\n-21-32", "-2", 0)]
        [DataRow("//[-1][-2][-3]\n-31-12", "-3", 0)]
        [DataRow("//[-1][-2][-3]\n1-1-22", "-2", 3)]
        [DataRow("//[-1][-2][-3]\n1-2-32", "-3", 3)]
        [DataRow("//[-1][-2][-3]\n1-3-12", "-1", 3)]
        [DataRow("//[sep1][sep2][sep3]\nsep11sep12", "sep1", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep1sep12", "sep1", 5)]
        [DataRow("//[sep1][sep2][sep3]\nsep21sep22", "sep2", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep2sep22", "sep2", 5)]
        [DataRow("//[sep1][sep2][sep3]\nsep31sep32", "sep3", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep3sep32", "sep3", 5)]
        [DataRow("//[sep1][sep2][sep3]\nsep11sep22", "sep1", 0)]
        [DataRow("//[sep1][sep2][sep3]\nsep21sep32", "sep2", 0)]
        [DataRow("//[sep1][sep2][sep3]\nsep31sep12", "sep3", 0)]
        [DataRow("//[sep1][sep2][sep3]\n1sep1sep22", "sep2", 5)]
        [DataRow("//[sep1][sep2][sep3]\n1sep2sep32", "sep3", 5)]
        [DataRow("//[sep1][sep2][sep3]\n1sep3sep12", "sep1", 5)]
        [DataRow("//[?][??][???]\n?1?2", "?", 0)]
        [DataRow("//[?][??][???]\n??1??2", "??", 0)]
        [DataRow("//[?][??][???]\n1????2", "?", 4)]
        [DataRow("//[?][??][???]\n???1???2", "???", 0)]
        [DataRow("//[?][??][???]\n1??????2", "???", 4)]
        [DataRow("//[?][??][???]\n?1??2", "?", 0)]
        [DataRow("//[?][??][???]\n??1???2", "??", 0)]
        [DataRow("//[?][??][???]\n???1?2", "???", 0)]
        [DataRow("//[?][??][???]\n1?????2", "??", 4)]
        [DataRow("//[?][??][???]\n1????2", "?", 4)]
        public void Test_Add_Should_ThrowException_When_CalledWithInputContainsTwoOrMoreSeparatorsNext(string input, string unexpectedSeparator, int position)
        {
            // Arrange.
            var errorMessage = $"Number expected but '{unexpectedSeparator}' found at position {position}.";

            // Act.
            var exception = Assert.ThrowsException<Exception>(() => this.Act_Add(input));

            // Assert.
            Assert.AreEqual(errorMessage, exception.Message);
        }

        /// <summary>
        /// The Add method should throw an exception when called with an input containing multiple errors.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <param name="negativesFound">Expected negative numbers in the input.</param>
        /// <param name="supportedSeparators">Expected specified separators in the input.</param>
        /// <param name="unsupportedSeparator">Expected unspecified separator in the input.</param>
        /// <param name="unsupportedPosition">Expected position of the unspecified separator.</param>
        /// <param name="unexpectedSeparator">Expected unexpected separator in the input.</param>
        /// <param name="position">Expected position of the unexpected separator.</param>
        [TestMethod]
        [DataRow("-1\n;|2;", "-1", ";' or '\n", "|", 4, ";", 3)]
        [DataRow("//$\n-1$$|2$", "-1", "$", "|", 4, "$", 3)]
        [DataRow("//$$\n-1$$$$|2$$", "-1", "$$", "|", 6, "$$", 4)]
        [DataRow("//sep\n-1sepsep|2sep", "-1", "sep", "|", 8, "sep", 5)]
        [DataRow("//\n\n-1\n\n|2\n", "-1", "\n", "|", 4, "\n", 3)]
        [DataRow("//-1\n-2-1-1|2-1", "-2", "-1", "|", 6, "-1", 4)]
        [DataRow("//[$]\n-1$$|2$", "-1", "$", "|", 4, "$", 3)]
        [DataRow("//[$$]\n-1$$$$|2$$", "-1", "$$", "|", 6, "$$", 4)]
        [DataRow("//[sep]\n-1sepsep|2sep", "-1", "sep", "|", 8, "sep", 5)]
        [DataRow("//[\n]\n-1\n\n|2\n", "-1", "\n", "|", 4, "\n", 3)]
        [DataRow("//[-1]\n-2-1-1|2-1", "-2", "-1", "|", 6, "-1", 4)]
        [DataRow("//[-1][-2]\n-3-2-1|2-2", "-3", "-1' or '-2", "|", 6, "-1", 4)]
        [DataRow("//[*][%]\n-1%*|2%", "-1", "*' or '%", "|", 4, "*", 3)]
        [DataRow("//[**][%%]\n-1%%**|2%%", "-1", "**' or '%%", "|", 6, "**", 4)]
        [DataRow("//[sep1][sep2]\n-1sep2sep1|2sep2", "-1", "sep1' or 'sep2", "|", 10, "sep1", 6)]
        [DataRow("//[[][]]\n-1][|2]", "-1", "[' or ']", "|", 4, "[", 3)]
        [DataRow("//[+][!][#]\n-1#!|2+", "-1", "+' or '!' or '#", "|", 4, "!", 3)]
        [DataRow("//[++][!!][##]\n-1##!!|2++", "-1", "++' or '!!' or '##", "|", 6, "!!", 4)]
        [DataRow("//[-1][-2][-3]\n-4-3-2|2-1", "-4", "-1' or '-2' or '-3", "|", 6, "-2", 4)]
        [DataRow("//[sep1][sep2][sep3]\n-1sep3sep2|2sep1", "-1", "sep1' or 'sep2' or 'sep3", "|", 10, "sep2", 6)]
        [DataRow("//[?][??][???]\n-1?????|2?", "-1", "???' or '??' or '?", "|", 7, "??", 5)]
        public void Test_Add_Should_ThrowException_When_CalledWithInputContainsMultipleErrors(string input, string negativesFound, string supportedSeparators, string unsupportedSeparator, int unsupportedPosition, string unexpectedSeparator, int unexpectedPosition)
        {
            // Arrange.
            var errorMessage = $"Negatives not allowed : {negativesFound}\n'{supportedSeparators}' expected but '{unsupportedSeparator}' found at position {unsupportedPosition}.\nNumber expected but '{unexpectedSeparator}' found at position {unexpectedPosition}.\nNumber expected but EOF found.";

            // Act.
            var exception = Assert.ThrowsException<Exception>(() => this.Act_Add(input));

            // Assert.
            Assert.AreEqual(errorMessage, exception.Message);
        }

        #endregion Public Methods

        #region Protected Methods

        /// <summary>
        /// Invokes the Add method with the provided test input.
        /// </summary>
        /// <param name="input">The test case input.</param>
        /// <returns>The result of the method.</returns>
        protected int Act_Add(string input)
        {
            var stringCalculator = new StringCalculator();

            return stringCalculator.Add(input);
        }

        #endregion Protected Methods

        #endregion Methods
    }
}
